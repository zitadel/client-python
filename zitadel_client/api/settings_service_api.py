# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictBool, StrictStr
from typing import Optional
from zitadel_client.models.settings_service_get_active_identity_providers_response import SettingsServiceGetActiveIdentityProvidersResponse
from zitadel_client.models.settings_service_get_branding_settings_response import SettingsServiceGetBrandingSettingsResponse
from zitadel_client.models.settings_service_get_domain_settings_response import SettingsServiceGetDomainSettingsResponse
from zitadel_client.models.settings_service_get_general_settings_response import SettingsServiceGetGeneralSettingsResponse
from zitadel_client.models.settings_service_get_legal_and_support_settings_response import SettingsServiceGetLegalAndSupportSettingsResponse
from zitadel_client.models.settings_service_get_lockout_settings_response import SettingsServiceGetLockoutSettingsResponse
from zitadel_client.models.settings_service_get_login_settings_response import SettingsServiceGetLoginSettingsResponse
from zitadel_client.models.settings_service_get_password_complexity_settings_response import SettingsServiceGetPasswordComplexitySettingsResponse
from zitadel_client.models.settings_service_get_password_expiry_settings_response import SettingsServiceGetPasswordExpirySettingsResponse
from zitadel_client.models.settings_service_get_security_settings_response import SettingsServiceGetSecuritySettingsResponse
from zitadel_client.models.settings_service_set_security_settings_request import SettingsServiceSetSecuritySettingsRequest
from zitadel_client.models.settings_service_set_security_settings_response import SettingsServiceSetSecuritySettingsResponse

from zitadel_client.api_client import ApiClient, RequestSerialized
from zitadel_client.api_response import ApiResponse
from zitadel_client.rest import RESTResponseType


class SettingsServiceApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def settings_service_get_active_identity_providers(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
      creation_allowed: Optional[StrictBool] = None,
      linking_allowed: Optional[StrictBool] = None,
      auto_creation: Optional[StrictBool] = None,
      auto_linking: Optional[StrictBool] = None,
    ) -> SettingsServiceGetActiveIdentityProvidersResponse:
        """Get the current active identity providers

        Return the current active identity providers for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :param creation_allowed:
        :type creation_allowed: bool
        :param linking_allowed:
        :type linking_allowed: bool
        :param auto_creation:
        :type auto_creation: bool
        :param auto_linking:
        :type auto_linking: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_active_identity_providers_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            creation_allowed=creation_allowed,
            linking_allowed=linking_allowed,
            auto_creation=auto_creation,
            auto_linking=auto_linking,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetActiveIdentityProvidersResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_active_identity_providers_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        creation_allowed,
        linking_allowed,
        auto_creation,
        auto_linking,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        if creation_allowed is not None:
            
            _query_params.append(('creationAllowed', creation_allowed))
            
        if linking_allowed is not None:
            
            _query_params.append(('linkingAllowed', linking_allowed))
            
        if auto_creation is not None:
            
            _query_params.append(('autoCreation', auto_creation))
            
        if auto_linking is not None:
            
            _query_params.append(('autoLinking', auto_linking))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/login/idps',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_branding_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetBrandingSettingsResponse:
        """Get the current active branding settings

        Return the current active branding settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_branding_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetBrandingSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_branding_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/branding',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_domain_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetDomainSettingsResponse:
        """Get the domain settings

        Return the domain settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_domain_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetDomainSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_domain_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/domain',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_general_settings(
    self,
    ) -> SettingsServiceGetGeneralSettingsResponse:
        """Get basic information over the instance

        Return the basic information of the instance for the requested context

        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_general_settings_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetGeneralSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_general_settings_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_legal_and_support_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetLegalAndSupportSettingsResponse:
        """Get the legal and support settings

        Return the legal settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_legal_and_support_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetLegalAndSupportSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_legal_and_support_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/legal_support',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_lockout_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetLockoutSettingsResponse:
        """Get the lockout settings

        Return the lockout settings for the requested context, which define when a user will be locked

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_lockout_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetLockoutSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_lockout_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/lockout',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_login_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetLoginSettingsResponse:
        """Get the login settings

        Return the settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_login_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetLoginSettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_login_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/login',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_password_complexity_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetPasswordComplexitySettingsResponse:
        """Get the password complexity settings

        Return the password complexity settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_password_complexity_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetPasswordComplexitySettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_password_complexity_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/password/complexity',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_password_expiry_settings(
    self,
      ctx_org_id: Optional[StrictStr] = None,
      ctx_instance: Optional[StrictBool] = None,
    ) -> SettingsServiceGetPasswordExpirySettingsResponse:
        """Get the password expiry settings

        Return the password expiry settings for the requested context

        :param ctx_org_id:
        :type ctx_org_id: str
        :param ctx_instance:
        :type ctx_instance: bool
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_password_expiry_settings_serialize(
            ctx_org_id=ctx_org_id,
            ctx_instance=ctx_instance,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetPasswordExpirySettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_password_expiry_settings_serialize(
        self,
        ctx_org_id,
        ctx_instance,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ctx_org_id is not None:
            
            _query_params.append(('ctx.orgId', ctx_org_id))
            
        if ctx_instance is not None:
            
            _query_params.append(('ctx.instance', ctx_instance))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/password/expiry',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_get_security_settings(
    self,
    ) -> SettingsServiceGetSecuritySettingsResponse:
        """Get Security Settings

        Returns the security settings of the ZITADEL instance.

        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_get_security_settings_serialize(
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceGetSecuritySettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_get_security_settings_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/v2/settings/security',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def settings_service_set_security_settings(
    self,
      settings_service_set_security_settings_request: SettingsServiceSetSecuritySettingsRequest,
    ) -> SettingsServiceSetSecuritySettingsResponse:
        """Set Security Settings

        Set the security settings of the ZITADEL instance.

        :param settings_service_set_security_settings_request: (required)
        :type settings_service_set_security_settings_request: SettingsServiceSetSecuritySettingsRequest
        :return: Returns the result object.
        """ # noqa: E501

        _param = self.__settings_service_set_security_settings_serialize(
            settings_service_set_security_settings_request=settings_service_set_security_settings_request,
            _request_auth=None,
            _content_type=None,
            _headers=None,
            _host_index=0
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SettingsServiceSetSecuritySettingsResponse",
            '403': "SettingsServiceRpcStatus",
            '404': "SettingsServiceRpcStatus",
        }

        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=None
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    def __settings_service_set_security_settings_serialize(
        self,
        settings_service_set_security_settings_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if settings_service_set_security_settings_request is not None:
            _body_params = settings_service_set_security_settings_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'zitadelAccessToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/v2/policies/security',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


