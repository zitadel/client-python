# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.apple import Apple
from zitadel_client.models.azure_ad import AzureAd
from zitadel_client.models.github import Github
from zitadel_client.models.github_es import GithubEs
from zitadel_client.models.gitlab import Gitlab
from zitadel_client.models.gitlab_self_hosted import GitlabSelfHosted
from zitadel_client.models.google import Google
from zitadel_client.models.jwt import Jwt
from zitadel_client.models.ldap import Ldap
from zitadel_client.models.oauth import Oauth
from zitadel_client.models.oidc import Oidc
from zitadel_client.models.saml import Saml
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

IDENTITYPROVIDERSERVICEIDPCONFIG_ONE_OF_SCHEMAS = ["Apple", "AzureAd", "Github", "GithubEs", "Gitlab", "GitlabSelfHosted", "Google", "Jwt", "Ldap", "Oauth", "Oidc", "Saml"]

class IdentityProviderServiceIDPConfig(BaseModel):
    """
    IdentityProviderServiceIDPConfig
    """
    # data type: Apple
    oneof_schema_1_validator: Optional[Apple] = None
    # data type: AzureAd
    oneof_schema_2_validator: Optional[AzureAd] = None
    # data type: Github
    oneof_schema_3_validator: Optional[Github] = None
    # data type: GithubEs
    oneof_schema_4_validator: Optional[GithubEs] = None
    # data type: Gitlab
    oneof_schema_5_validator: Optional[Gitlab] = None
    # data type: GitlabSelfHosted
    oneof_schema_6_validator: Optional[GitlabSelfHosted] = None
    # data type: Google
    oneof_schema_7_validator: Optional[Google] = None
    # data type: Jwt
    oneof_schema_8_validator: Optional[Jwt] = None
    # data type: Ldap
    oneof_schema_9_validator: Optional[Ldap] = None
    # data type: Oauth
    oneof_schema_10_validator: Optional[Oauth] = None
    # data type: Oidc
    oneof_schema_11_validator: Optional[Oidc] = None
    # data type: Saml
    oneof_schema_12_validator: Optional[Saml] = None
    actual_instance: Optional[Union[Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml]] = None
    one_of_schemas: Set[str] = { "Apple", "AzureAd", "Github", "GithubEs", "Gitlab", "GitlabSelfHosted", "Google", "Jwt", "Ldap", "Oauth", "Oidc", "Saml" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IdentityProviderServiceIDPConfig.model_construct()
        error_messages = []
        match = 0
        # validate data type: Apple
        if not isinstance(v, Apple):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Apple`")
        else:
            match += 1
        # validate data type: AzureAd
        if not isinstance(v, AzureAd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureAd`")
        else:
            match += 1
        # validate data type: Github
        if not isinstance(v, Github):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Github`")
        else:
            match += 1
        # validate data type: GithubEs
        if not isinstance(v, GithubEs):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GithubEs`")
        else:
            match += 1
        # validate data type: Gitlab
        if not isinstance(v, Gitlab):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Gitlab`")
        else:
            match += 1
        # validate data type: GitlabSelfHosted
        if not isinstance(v, GitlabSelfHosted):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GitlabSelfHosted`")
        else:
            match += 1
        # validate data type: Google
        if not isinstance(v, Google):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Google`")
        else:
            match += 1
        # validate data type: Jwt
        if not isinstance(v, Jwt):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Jwt`")
        else:
            match += 1
        # validate data type: Ldap
        if not isinstance(v, Ldap):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Ldap`")
        else:
            match += 1
        # validate data type: Oauth
        if not isinstance(v, Oauth):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Oauth`")
        else:
            match += 1
        # validate data type: Oidc
        if not isinstance(v, Oidc):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Oidc`")
        else:
            match += 1
        # validate data type: Saml
        if not isinstance(v, Saml):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Saml`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IdentityProviderServiceIDPConfig with oneOf schemas: Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IdentityProviderServiceIDPConfig with oneOf schemas: Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Apple
        try:
            instance.actual_instance = Apple.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureAd
        try:
            instance.actual_instance = AzureAd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Github
        try:
            instance.actual_instance = Github.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GithubEs
        try:
            instance.actual_instance = GithubEs.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Gitlab
        try:
            instance.actual_instance = Gitlab.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GitlabSelfHosted
        try:
            instance.actual_instance = GitlabSelfHosted.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Google
        try:
            instance.actual_instance = Google.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Jwt
        try:
            instance.actual_instance = Jwt.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Ldap
        try:
            instance.actual_instance = Ldap.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Oauth
        try:
            instance.actual_instance = Oauth.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Oidc
        try:
            instance.actual_instance = Oidc.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Saml
        try:
            instance.actual_instance = Saml.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IdentityProviderServiceIDPConfig with oneOf schemas: Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IdentityProviderServiceIDPConfig with oneOf schemas: Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], Apple, AzureAd, Github, GithubEs, Gitlab, GitlabSelfHosted, Google, Jwt, Ldap, Oauth, Oidc, Saml]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


