# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.display_name_query import DisplayNameQuery
from zitadel_client.models.email_query import EmailQuery
from zitadel_client.models.first_name_query import FirstNameQuery
from zitadel_client.models.in_user_emails_query import InUserEmailsQuery
from zitadel_client.models.in_user_ids_query import InUserIdsQuery
from zitadel_client.models.last_name_query import LastNameQuery
from zitadel_client.models.login_name_query import LoginNameQuery
from zitadel_client.models.nick_name_query import NickNameQuery
from zitadel_client.models.organization_id_query import OrganizationIdQuery
from zitadel_client.models.phone_query import PhoneQuery
from zitadel_client.models.state_query import StateQuery
from zitadel_client.models.type_query import TypeQuery
from zitadel_client.models.user_name_query import UserNameQuery
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
USERSERVICESEARCHQUERY_ONE_OF_SCHEMAS = ["AndQuery", "DisplayNameQuery", "EmailQuery", "FirstNameQuery", "InUserEmailsQuery", "InUserIdsQuery", "LastNameQuery", "LoginNameQuery", "NickNameQuery", "NotQuery", "OrQuery", "OrganizationIdQuery", "PhoneQuery", "StateQuery", "TypeQuery", "UserNameQuery"]

class UserServiceSearchQuery(BaseModel):
    """
    UserServiceSearchQuery
    """
    # data type: AndQuery
    oneof_schema_1_validator: Optional[AndQuery] = None
    # data type: DisplayNameQuery
    oneof_schema_2_validator: Optional[DisplayNameQuery] = None
    # data type: EmailQuery
    oneof_schema_3_validator: Optional[EmailQuery] = None
    # data type: FirstNameQuery
    oneof_schema_4_validator: Optional[FirstNameQuery] = None
    # data type: InUserEmailsQuery
    oneof_schema_5_validator: Optional[InUserEmailsQuery] = None
    # data type: InUserIdsQuery
    oneof_schema_6_validator: Optional[InUserIdsQuery] = None
    # data type: LastNameQuery
    oneof_schema_7_validator: Optional[LastNameQuery] = None
    # data type: LoginNameQuery
    oneof_schema_8_validator: Optional[LoginNameQuery] = None
    # data type: NickNameQuery
    oneof_schema_9_validator: Optional[NickNameQuery] = None
    # data type: NotQuery
    oneof_schema_10_validator: Optional[NotQuery] = None
    # data type: OrQuery
    oneof_schema_11_validator: Optional[OrQuery] = None
    # data type: OrganizationIdQuery
    oneof_schema_12_validator: Optional[OrganizationIdQuery] = None
    # data type: PhoneQuery
    oneof_schema_13_validator: Optional[PhoneQuery] = None
    # data type: StateQuery
    oneof_schema_14_validator: Optional[StateQuery] = None
    # data type: TypeQuery
    oneof_schema_15_validator: Optional[TypeQuery] = None
    # data type: UserNameQuery
    oneof_schema_16_validator: Optional[UserNameQuery] = None
    actual_instance: Optional[Union[AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery]] = None
    one_of_schemas: Set[str] = { "AndQuery", "DisplayNameQuery", "EmailQuery", "FirstNameQuery", "InUserEmailsQuery", "InUserIdsQuery", "LastNameQuery", "LoginNameQuery", "NickNameQuery", "NotQuery", "OrQuery", "OrganizationIdQuery", "PhoneQuery", "StateQuery", "TypeQuery", "UserNameQuery" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UserServiceSearchQuery.model_construct()
        error_messages = []
        match = 0
        # validate data type: AndQuery
        if not isinstance(v, AndQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AndQuery`")
        else:
            match += 1
        # validate data type: DisplayNameQuery
        if not isinstance(v, DisplayNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DisplayNameQuery`")
        else:
            match += 1
        # validate data type: EmailQuery
        if not isinstance(v, EmailQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmailQuery`")
        else:
            match += 1
        # validate data type: FirstNameQuery
        if not isinstance(v, FirstNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FirstNameQuery`")
        else:
            match += 1
        # validate data type: InUserEmailsQuery
        if not isinstance(v, InUserEmailsQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InUserEmailsQuery`")
        else:
            match += 1
        # validate data type: InUserIdsQuery
        if not isinstance(v, InUserIdsQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InUserIdsQuery`")
        else:
            match += 1
        # validate data type: LastNameQuery
        if not isinstance(v, LastNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LastNameQuery`")
        else:
            match += 1
        # validate data type: LoginNameQuery
        if not isinstance(v, LoginNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginNameQuery`")
        else:
            match += 1
        # validate data type: NickNameQuery
        if not isinstance(v, NickNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NickNameQuery`")
        else:
            match += 1
        # validate data type: NotQuery
        if not isinstance(v, NotQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotQuery`")
        else:
            match += 1
        # validate data type: OrQuery
        if not isinstance(v, OrQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrQuery`")
        else:
            match += 1
        # validate data type: OrganizationIdQuery
        if not isinstance(v, OrganizationIdQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrganizationIdQuery`")
        else:
            match += 1
        # validate data type: PhoneQuery
        if not isinstance(v, PhoneQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhoneQuery`")
        else:
            match += 1
        # validate data type: StateQuery
        if not isinstance(v, StateQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StateQuery`")
        else:
            match += 1
        # validate data type: TypeQuery
        if not isinstance(v, TypeQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TypeQuery`")
        else:
            match += 1
        # validate data type: UserNameQuery
        if not isinstance(v, UserNameQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserNameQuery`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UserServiceSearchQuery with oneOf schemas: AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UserServiceSearchQuery with oneOf schemas: AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AndQuery
        try:
            instance.actual_instance = AndQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DisplayNameQuery
        try:
            instance.actual_instance = DisplayNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EmailQuery
        try:
            instance.actual_instance = EmailQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FirstNameQuery
        try:
            instance.actual_instance = FirstNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InUserEmailsQuery
        try:
            instance.actual_instance = InUserEmailsQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InUserIdsQuery
        try:
            instance.actual_instance = InUserIdsQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LastNameQuery
        try:
            instance.actual_instance = LastNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginNameQuery
        try:
            instance.actual_instance = LoginNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NickNameQuery
        try:
            instance.actual_instance = NickNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotQuery
        try:
            instance.actual_instance = NotQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrQuery
        try:
            instance.actual_instance = OrQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrganizationIdQuery
        try:
            instance.actual_instance = OrganizationIdQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhoneQuery
        try:
            instance.actual_instance = PhoneQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StateQuery
        try:
            instance.actual_instance = StateQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TypeQuery
        try:
            instance.actual_instance = TypeQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserNameQuery
        try:
            instance.actual_instance = UserNameQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UserServiceSearchQuery with oneOf schemas: AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UserServiceSearchQuery with oneOf schemas: AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AndQuery, DisplayNameQuery, EmailQuery, FirstNameQuery, InUserEmailsQuery, InUserIdsQuery, LastNameQuery, LoginNameQuery, NickNameQuery, NotQuery, OrQuery, OrganizationIdQuery, PhoneQuery, StateQuery, TypeQuery, UserNameQuery]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from zitadel_client.models.and_query import AndQuery
from zitadel_client.models.not_query import NotQuery
from zitadel_client.models.or_query import OrQuery
# TODO: Rewrite to not use raise_errors
UserServiceSearchQuery.model_rebuild(raise_errors=False)

