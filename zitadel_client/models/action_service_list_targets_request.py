# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from zitadel_client.models.action_service_beta_pagination_request import ActionServiceBetaPaginationRequest
from zitadel_client.models.action_service_beta_target_field_name import ActionServiceBetaTargetFieldName
from zitadel_client.models.action_service_beta_target_search_filter import ActionServiceBetaTargetSearchFilter
from typing import Optional, Set
from typing_extensions import Self

class ActionServiceListTargetsRequest(BaseModel):
    """
    ActionServiceListTargetsRequest
    """ # noqa: E501
    pagination: Optional[ActionServiceBetaPaginationRequest] = None
    sorting_column: Optional[ActionServiceBetaTargetFieldName] = Field(default=ActionServiceBetaTargetFieldName.TARGET_FIELD_NAME_UNSPECIFIED, alias="sortingColumn")
    filters: Optional[List[ActionServiceBetaTargetSearchFilter]] = Field(default=None, description="Define the criteria to query for.")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["pagination", "sortingColumn", "filters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionServiceListTargetsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict['pagination'] = self.pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item_filters in self.filters:
                if _item_filters:
                    _items.append(_item_filters.to_dict())
            _dict['filters'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionServiceListTargetsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pagination": ActionServiceBetaPaginationRequest.from_dict(obj["pagination"]) if obj.get("pagination") is not None else None,
            "sortingColumn": obj.get("sortingColumn") if obj.get("sortingColumn") is not None else ActionServiceBetaTargetFieldName.TARGET_FIELD_NAME_UNSPECIFIED,
            "filters": [ActionServiceBetaTargetSearchFilter.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


