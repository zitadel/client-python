# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from zitadel_client.models.web_key_service_ecdsa import WebKeyServiceECDSA
from zitadel_client.models.web_key_service_rsa import WebKeyServiceRSA
from typing import Optional, Set
from typing_extensions import Self

class NoOp200Response14(BaseModel):
    """
    NoOp200Response14
    """ # noqa: E501
    var_79517260_f523_4089_8725_4013c57c43f0: Optional[WebKeyServiceECDSA] = Field(default=None, alias="79517260-f523-4089-8725-4013c57c43f0")
    var_76bb17ba_a8b7_4e14_a89b_e0af19a5c5bb: Optional[Dict[str, Any]] = Field(default=None, alias="76bb17ba-a8b7-4e14-a89b-e0af19a5c5bb")
    f54c509e_af55_4d5c_bb8d_024ff8cfb58b: Optional[WebKeyServiceRSA] = Field(default=None, alias="f54c509e-af55-4d5c-bb8d-024ff8cfb58b")
    __properties: ClassVar[List[str]] = ["79517260-f523-4089-8725-4013c57c43f0", "76bb17ba-a8b7-4e14-a89b-e0af19a5c5bb", "f54c509e-af55-4d5c-bb8d-024ff8cfb58b"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoOp200Response14 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_79517260_f523_4089_8725_4013c57c43f0
        if self.var_79517260_f523_4089_8725_4013c57c43f0:
            _dict['79517260-f523-4089-8725-4013c57c43f0'] = self.var_79517260_f523_4089_8725_4013c57c43f0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of f54c509e_af55_4d5c_bb8d_024ff8cfb58b
        if self.f54c509e_af55_4d5c_bb8d_024ff8cfb58b:
            _dict['f54c509e-af55-4d5c-bb8d-024ff8cfb58b'] = self.f54c509e_af55_4d5c_bb8d_024ff8cfb58b.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoOp200Response14 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "79517260-f523-4089-8725-4013c57c43f0": WebKeyServiceECDSA.from_dict(obj["79517260-f523-4089-8725-4013c57c43f0"]) if obj.get("79517260-f523-4089-8725-4013c57c43f0") is not None else None,
            "76bb17ba-a8b7-4e14-a89b-e0af19a5c5bb": obj.get("76bb17ba-a8b7-4e14-a89b-e0af19a5c5bb"),
            "f54c509e-af55-4d5c-bb8d-024ff8cfb58b": WebKeyServiceRSA.from_dict(obj["f54c509e-af55-4d5c-bb8d-024ff8cfb58b"]) if obj.get("f54c509e-af55-4d5c-bb8d-024ff8cfb58b") is not None else None
        })
        return _obj


