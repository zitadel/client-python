# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.display_name_query1 import DisplayNameQuery1
from zitadel_client.models.email_query1 import EmailQuery1
from zitadel_client.models.first_name_query1 import FirstNameQuery1
from zitadel_client.models.in_user_emails_query1 import InUserEmailsQuery1
from zitadel_client.models.in_user_ids_query1 import InUserIdsQuery1
from zitadel_client.models.last_name_query1 import LastNameQuery1
from zitadel_client.models.login_name_query1 import LoginNameQuery1
from zitadel_client.models.nick_name_query1 import NickNameQuery1
from zitadel_client.models.organization_id_query1 import OrganizationIdQuery1
from zitadel_client.models.phone_query1 import PhoneQuery1
from zitadel_client.models.state_query2 import StateQuery2
from zitadel_client.models.type_query1 import TypeQuery1
from zitadel_client.models.user_name_query1 import UserNameQuery1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BETAUSERSERVICESEARCHQUERY_ONE_OF_SCHEMAS = ["AndQuery1", "DisplayNameQuery1", "EmailQuery1", "FirstNameQuery1", "InUserEmailsQuery1", "InUserIdsQuery1", "LastNameQuery1", "LoginNameQuery1", "NickNameQuery1", "NotQuery1", "OrQuery1", "OrganizationIdQuery1", "PhoneQuery1", "StateQuery2", "TypeQuery1", "UserNameQuery1"]

class BetaUserServiceSearchQuery(BaseModel):
    """
    BetaUserServiceSearchQuery
    """
    # data type: AndQuery1
    oneof_schema_1_validator: Optional[AndQuery1] = None
    # data type: DisplayNameQuery1
    oneof_schema_2_validator: Optional[DisplayNameQuery1] = None
    # data type: EmailQuery1
    oneof_schema_3_validator: Optional[EmailQuery1] = None
    # data type: FirstNameQuery1
    oneof_schema_4_validator: Optional[FirstNameQuery1] = None
    # data type: InUserEmailsQuery1
    oneof_schema_5_validator: Optional[InUserEmailsQuery1] = None
    # data type: InUserIdsQuery1
    oneof_schema_6_validator: Optional[InUserIdsQuery1] = None
    # data type: LastNameQuery1
    oneof_schema_7_validator: Optional[LastNameQuery1] = None
    # data type: LoginNameQuery1
    oneof_schema_8_validator: Optional[LoginNameQuery1] = None
    # data type: NickNameQuery1
    oneof_schema_9_validator: Optional[NickNameQuery1] = None
    # data type: NotQuery1
    oneof_schema_10_validator: Optional[NotQuery1] = None
    # data type: OrQuery1
    oneof_schema_11_validator: Optional[OrQuery1] = None
    # data type: OrganizationIdQuery1
    oneof_schema_12_validator: Optional[OrganizationIdQuery1] = None
    # data type: PhoneQuery1
    oneof_schema_13_validator: Optional[PhoneQuery1] = None
    # data type: StateQuery2
    oneof_schema_14_validator: Optional[StateQuery2] = None
    # data type: TypeQuery1
    oneof_schema_15_validator: Optional[TypeQuery1] = None
    # data type: UserNameQuery1
    oneof_schema_16_validator: Optional[UserNameQuery1] = None
    actual_instance: Optional[Union[AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1]] = None
    one_of_schemas: Set[str] = { "AndQuery1", "DisplayNameQuery1", "EmailQuery1", "FirstNameQuery1", "InUserEmailsQuery1", "InUserIdsQuery1", "LastNameQuery1", "LoginNameQuery1", "NickNameQuery1", "NotQuery1", "OrQuery1", "OrganizationIdQuery1", "PhoneQuery1", "StateQuery2", "TypeQuery1", "UserNameQuery1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaUserServiceSearchQuery.model_construct()
        error_messages = []
        match = 0
        # validate data type: AndQuery1
        if not isinstance(v, AndQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AndQuery1`")
        else:
            match += 1
        # validate data type: DisplayNameQuery1
        if not isinstance(v, DisplayNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DisplayNameQuery1`")
        else:
            match += 1
        # validate data type: EmailQuery1
        if not isinstance(v, EmailQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EmailQuery1`")
        else:
            match += 1
        # validate data type: FirstNameQuery1
        if not isinstance(v, FirstNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FirstNameQuery1`")
        else:
            match += 1
        # validate data type: InUserEmailsQuery1
        if not isinstance(v, InUserEmailsQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InUserEmailsQuery1`")
        else:
            match += 1
        # validate data type: InUserIdsQuery1
        if not isinstance(v, InUserIdsQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InUserIdsQuery1`")
        else:
            match += 1
        # validate data type: LastNameQuery1
        if not isinstance(v, LastNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LastNameQuery1`")
        else:
            match += 1
        # validate data type: LoginNameQuery1
        if not isinstance(v, LoginNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginNameQuery1`")
        else:
            match += 1
        # validate data type: NickNameQuery1
        if not isinstance(v, NickNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NickNameQuery1`")
        else:
            match += 1
        # validate data type: NotQuery1
        if not isinstance(v, NotQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NotQuery1`")
        else:
            match += 1
        # validate data type: OrQuery1
        if not isinstance(v, OrQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrQuery1`")
        else:
            match += 1
        # validate data type: OrganizationIdQuery1
        if not isinstance(v, OrganizationIdQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrganizationIdQuery1`")
        else:
            match += 1
        # validate data type: PhoneQuery1
        if not isinstance(v, PhoneQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PhoneQuery1`")
        else:
            match += 1
        # validate data type: StateQuery2
        if not isinstance(v, StateQuery2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StateQuery2`")
        else:
            match += 1
        # validate data type: TypeQuery1
        if not isinstance(v, TypeQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TypeQuery1`")
        else:
            match += 1
        # validate data type: UserNameQuery1
        if not isinstance(v, UserNameQuery1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserNameQuery1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaUserServiceSearchQuery with oneOf schemas: AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaUserServiceSearchQuery with oneOf schemas: AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AndQuery1
        try:
            instance.actual_instance = AndQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DisplayNameQuery1
        try:
            instance.actual_instance = DisplayNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EmailQuery1
        try:
            instance.actual_instance = EmailQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FirstNameQuery1
        try:
            instance.actual_instance = FirstNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InUserEmailsQuery1
        try:
            instance.actual_instance = InUserEmailsQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InUserIdsQuery1
        try:
            instance.actual_instance = InUserIdsQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LastNameQuery1
        try:
            instance.actual_instance = LastNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginNameQuery1
        try:
            instance.actual_instance = LoginNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NickNameQuery1
        try:
            instance.actual_instance = NickNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NotQuery1
        try:
            instance.actual_instance = NotQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrQuery1
        try:
            instance.actual_instance = OrQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrganizationIdQuery1
        try:
            instance.actual_instance = OrganizationIdQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PhoneQuery1
        try:
            instance.actual_instance = PhoneQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StateQuery2
        try:
            instance.actual_instance = StateQuery2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TypeQuery1
        try:
            instance.actual_instance = TypeQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserNameQuery1
        try:
            instance.actual_instance = UserNameQuery1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaUserServiceSearchQuery with oneOf schemas: AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaUserServiceSearchQuery with oneOf schemas: AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AndQuery1, DisplayNameQuery1, EmailQuery1, FirstNameQuery1, InUserEmailsQuery1, InUserIdsQuery1, LastNameQuery1, LoginNameQuery1, NickNameQuery1, NotQuery1, OrQuery1, OrganizationIdQuery1, PhoneQuery1, StateQuery2, TypeQuery1, UserNameQuery1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from zitadel_client.models.and_query1 import AndQuery1
from zitadel_client.models.not_query1 import NotQuery1
from zitadel_client.models.or_query1 import OrQuery1
# TODO: Rewrite to not use raise_errors
BetaUserServiceSearchQuery.model_rebuild(raise_errors=False)

