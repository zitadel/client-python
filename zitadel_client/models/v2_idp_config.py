# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Self

from zitadel_client.models.v2_apple_config import V2AppleConfig
from zitadel_client.models.v2_azure_ad_config import V2AzureADConfig
from zitadel_client.models.v2_generic_oidc_config import V2GenericOIDCConfig
from zitadel_client.models.v2_git_hub_config import V2GitHubConfig
from zitadel_client.models.v2_git_hub_enterprise_server_config import (
    V2GitHubEnterpriseServerConfig,
)
from zitadel_client.models.v2_git_lab_config import V2GitLabConfig
from zitadel_client.models.v2_git_lab_self_hosted_config import V2GitLabSelfHostedConfig
from zitadel_client.models.v2_google_config import V2GoogleConfig
from zitadel_client.models.v2_jwt_config import V2JWTConfig
from zitadel_client.models.v2_ldap_config import V2LDAPConfig
from zitadel_client.models.v2_o_auth_config import V2OAuthConfig
from zitadel_client.models.v2_saml_config import V2SAMLConfig
from zitadel_client.models.zitadelidpv2_options import Zitadelidpv2Options


class V2IDPConfig(BaseModel):
    """
    V2IDPConfig
    """ # noqa: E501
    options: Optional[Zitadelidpv2Options] = None
    ldap: Optional[V2LDAPConfig] = None
    google: Optional[V2GoogleConfig] = None
    oauth: Optional[V2OAuthConfig] = None
    oidc: Optional[V2GenericOIDCConfig] = None
    jwt: Optional[V2JWTConfig] = None
    github: Optional[V2GitHubConfig] = None
    github_es: Optional[V2GitHubEnterpriseServerConfig] = Field(default=None, alias="githubEs")
    gitlab: Optional[V2GitLabConfig] = None
    gitlab_self_hosted: Optional[V2GitLabSelfHostedConfig] = Field(default=None, alias="gitlabSelfHosted")
    azure_ad: Optional[V2AzureADConfig] = Field(default=None, alias="azureAd")
    apple: Optional[V2AppleConfig] = None
    saml: Optional[V2SAMLConfig] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["options", "ldap", "google", "oauth", "oidc", "jwt", "github", "githubEs", "gitlab", "gitlabSelfHosted", "azureAd", "apple", "saml"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2IDPConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict["options"] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap
        if self.ldap:
            _dict["ldap"] = self.ldap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google
        if self.google:
            _dict["google"] = self.google.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth
        if self.oauth:
            _dict["oauth"] = self.oauth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oidc
        if self.oidc:
            _dict["oidc"] = self.oidc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of jwt
        if self.jwt:
            _dict["jwt"] = self.jwt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github
        if self.github:
            _dict["github"] = self.github.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github_es
        if self.github_es:
            _dict["githubEs"] = self.github_es.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gitlab
        if self.gitlab:
            _dict["gitlab"] = self.gitlab.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gitlab_self_hosted
        if self.gitlab_self_hosted:
            _dict["gitlabSelfHosted"] = self.gitlab_self_hosted.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_ad
        if self.azure_ad:
            _dict["azureAd"] = self.azure_ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of apple
        if self.apple:
            _dict["apple"] = self.apple.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml
        if self.saml:
            _dict["saml"] = self.saml.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2IDPConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "options": Zitadelidpv2Options.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "ldap": V2LDAPConfig.from_dict(obj["ldap"]) if obj.get("ldap") is not None else None,
            "google": V2GoogleConfig.from_dict(obj["google"]) if obj.get("google") is not None else None,
            "oauth": V2OAuthConfig.from_dict(obj["oauth"]) if obj.get("oauth") is not None else None,
            "oidc": V2GenericOIDCConfig.from_dict(obj["oidc"]) if obj.get("oidc") is not None else None,
            "jwt": V2JWTConfig.from_dict(obj["jwt"]) if obj.get("jwt") is not None else None,
            "github": V2GitHubConfig.from_dict(obj["github"]) if obj.get("github") is not None else None,
            "githubEs": V2GitHubEnterpriseServerConfig.from_dict(obj["githubEs"]) if obj.get("githubEs") is not None else None,
            "gitlab": V2GitLabConfig.from_dict(obj["gitlab"]) if obj.get("gitlab") is not None else None,
            "gitlabSelfHosted": V2GitLabSelfHostedConfig.from_dict(obj["gitlabSelfHosted"]) if obj.get("gitlabSelfHosted") is not None else None,
            "azureAd": V2AzureADConfig.from_dict(obj["azureAd"]) if obj.get("azureAd") is not None else None,
            "apple": V2AppleConfig.from_dict(obj["apple"]) if obj.get("apple") is not None else None,
            "saml": V2SAMLConfig.from_dict(obj["saml"]) if obj.get("saml") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


