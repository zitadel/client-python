# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.domain_filter import DomainFilter
from zitadel_client.models.id_filter import IdFilter
from zitadel_client.models.name_filter1 import NameFilter1
from zitadel_client.models.state_filter1 import StateFilter1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
BETAORGANIZATIONSERVICEORGANIZATIONSEARCHFILTER_ONE_OF_SCHEMAS = ["DomainFilter", "IdFilter", "NameFilter1", "StateFilter1"]

class BetaOrganizationServiceOrganizationSearchFilter(BaseModel):
    """
    BetaOrganizationServiceOrganizationSearchFilter
    """
    # data type: DomainFilter
    oneof_schema_1_validator: Optional[DomainFilter] = None
    # data type: IdFilter
    oneof_schema_2_validator: Optional[IdFilter] = None
    # data type: NameFilter1
    oneof_schema_3_validator: Optional[NameFilter1] = None
    # data type: StateFilter1
    oneof_schema_4_validator: Optional[StateFilter1] = None
    actual_instance: Optional[Union[DomainFilter, IdFilter, NameFilter1, StateFilter1]] = None
    one_of_schemas: Set[str] = { "DomainFilter", "IdFilter", "NameFilter1", "StateFilter1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaOrganizationServiceOrganizationSearchFilter.model_construct()
        error_messages = []
        match = 0
        # validate data type: DomainFilter
        if not isinstance(v, DomainFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainFilter`")
        else:
            match += 1
        # validate data type: IdFilter
        if not isinstance(v, IdFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IdFilter`")
        else:
            match += 1
        # validate data type: NameFilter1
        if not isinstance(v, NameFilter1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NameFilter1`")
        else:
            match += 1
        # validate data type: StateFilter1
        if not isinstance(v, StateFilter1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StateFilter1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaOrganizationServiceOrganizationSearchFilter with oneOf schemas: DomainFilter, IdFilter, NameFilter1, StateFilter1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaOrganizationServiceOrganizationSearchFilter with oneOf schemas: DomainFilter, IdFilter, NameFilter1, StateFilter1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DomainFilter
        try:
            instance.actual_instance = DomainFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IdFilter
        try:
            instance.actual_instance = IdFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NameFilter1
        try:
            instance.actual_instance = NameFilter1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StateFilter1
        try:
            instance.actual_instance = StateFilter1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaOrganizationServiceOrganizationSearchFilter with oneOf schemas: DomainFilter, IdFilter, NameFilter1, StateFilter1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaOrganizationServiceOrganizationSearchFilter with oneOf schemas: DomainFilter, IdFilter, NameFilter1, StateFilter1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DomainFilter, IdFilter, NameFilter1, StateFilter1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


