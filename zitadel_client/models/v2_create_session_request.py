# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Annotated, Self

from zitadel_client.models.v2_checks import V2Checks
from zitadel_client.models.v2_request_challenges import V2RequestChallenges
from zitadel_client.models.v2_user_agent import V2UserAgent


class V2CreateSessionRequest(BaseModel):
    """
    V2CreateSessionRequest
    """ # noqa: E501
    checks: Optional[V2Checks] = None
    metadata: Optional[Dict[str, Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]]] = Field(default=None, description='"custom key value list to be stored on the session"')
    challenges: Optional[V2RequestChallenges] = None
    user_agent: Optional[V2UserAgent] = Field(default=None, alias="userAgent")
    lifetime: Optional[StrictStr] = Field(default=None, description='"duration (in seconds) after which the session will be automatically invalidated"')
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["checks", "metadata", "challenges", "userAgent", "lifetime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2CreateSessionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of checks
        if self.checks:
            _dict["checks"] = self.checks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of challenges
        if self.challenges:
            _dict["challenges"] = self.challenges.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_agent
        if self.user_agent:
            _dict["userAgent"] = self.user_agent.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2CreateSessionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "checks": V2Checks.from_dict(obj["checks"]) if obj.get("checks") is not None else None,
            "metadata": obj.get("metadata"),
            "challenges": V2RequestChallenges.from_dict(obj["challenges"]) if obj.get("challenges") is not None else None,
            "userAgent": V2UserAgent.from_dict(obj["userAgent"]) if obj.get("userAgent") is not None else None,
            "lifetime": obj.get("lifetime")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


