# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from zitadel_client.models.organization_service_hashed_password import OrganizationServiceHashedPassword
from zitadel_client.models.organization_service_idp_link import OrganizationServiceIDPLink
from zitadel_client.models.organization_service_password import OrganizationServicePassword
from zitadel_client.models.organization_service_set_human_email import OrganizationServiceSetHumanEmail
from zitadel_client.models.organization_service_set_human_phone import OrganizationServiceSetHumanPhone
from zitadel_client.models.organization_service_set_human_profile import OrganizationServiceSetHumanProfile
from zitadel_client.models.organization_service_set_metadata_entry import OrganizationServiceSetMetadataEntry
from zitadel_client.models.zitadelobjectv2_organization import Zitadelobjectv2Organization
from typing import Optional, Set
from typing_extensions import Self

class OrganizationServiceAddHumanUserRequest(BaseModel):
    """
    OrganizationServiceAddHumanUserRequest
    """ # noqa: E501
    user_id: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(default=None, description="optionally set your own id unique for the user.", alias="userId")
    username: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(default=None, description="optionally set a unique username, if none is provided the email will be used.")
    organization: Optional[Zitadelobjectv2Organization] = None
    profile: OrganizationServiceSetHumanProfile
    email: OrganizationServiceSetHumanEmail
    phone: Optional[OrganizationServiceSetHumanPhone] = None
    metadata: Optional[List[OrganizationServiceSetMetadataEntry]] = None
    password: Optional[OrganizationServicePassword] = None
    hashed_password: Optional[OrganizationServiceHashedPassword] = Field(default=None, alias="hashedPassword")
    idp_links: Optional[List[OrganizationServiceIDPLink]] = Field(default=None, alias="idpLinks")
    totp_secret: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=200)]] = Field(default=None, description="An Implementation of RFC 6238 is used, with HMAC-SHA-1 and time-step of 30 seconds. Currently no other options are supported, and if anything different is used the validation will fail.", alias="totpSecret")

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganizationServiceAddHumanUserRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganizationServiceAddHumanUserRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "username": obj.get("username"),
            "organization": Zitadelobjectv2Organization.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "profile": OrganizationServiceSetHumanProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "email": OrganizationServiceSetHumanEmail.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "phone": OrganizationServiceSetHumanPhone.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "metadata": [OrganizationServiceSetMetadataEntry.from_dict(_item) for _item in obj["metadata"]] if obj.get("metadata") is not None else None,
            "password": OrganizationServicePassword.from_dict(obj["password"]) if obj.get("password") is not None else None,
            "hashedPassword": OrganizationServiceHashedPassword.from_dict(obj["hashedPassword"]) if obj.get("hashedPassword") is not None else None,
            "idpLinks": [OrganizationServiceIDPLink.from_dict(_item) for _item in obj["idpLinks"]] if obj.get("idpLinks") is not None else None,
            "totpSecret": obj.get("totpSecret")
        })
        return _obj


