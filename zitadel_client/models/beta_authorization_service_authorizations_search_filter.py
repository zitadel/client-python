# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.authorization_ids import AuthorizationIds
from zitadel_client.models.organization_id2 import OrganizationId2
from zitadel_client.models.project_grant_id1 import ProjectGrantId1
from zitadel_client.models.project_id2 import ProjectId2
from zitadel_client.models.project_name import ProjectName
from zitadel_client.models.role_key import RoleKey
from zitadel_client.models.state import State
from zitadel_client.models.user_display_name1 import UserDisplayName1
from zitadel_client.models.user_id1 import UserId1
from zitadel_client.models.user_organization_id1 import UserOrganizationId1
from zitadel_client.models.user_preferred_login_name1 import UserPreferredLoginName1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
BETAAUTHORIZATIONSERVICEAUTHORIZATIONSSEARCHFILTER_ONE_OF_SCHEMAS = ["AuthorizationIds", "OrganizationId2", "ProjectGrantId1", "ProjectId2", "ProjectName", "RoleKey", "State", "UserDisplayName1", "UserId1", "UserOrganizationId1", "UserPreferredLoginName1"]

class BetaAuthorizationServiceAuthorizationsSearchFilter(BaseModel):
    """
    BetaAuthorizationServiceAuthorizationsSearchFilter
    """
    # data type: AuthorizationIds
    oneof_schema_1_validator: Optional[AuthorizationIds] = None
    # data type: OrganizationId2
    oneof_schema_2_validator: Optional[OrganizationId2] = None
    # data type: ProjectGrantId1
    oneof_schema_3_validator: Optional[ProjectGrantId1] = None
    # data type: ProjectId2
    oneof_schema_4_validator: Optional[ProjectId2] = None
    # data type: ProjectName
    oneof_schema_5_validator: Optional[ProjectName] = None
    # data type: RoleKey
    oneof_schema_6_validator: Optional[RoleKey] = None
    # data type: State
    oneof_schema_7_validator: Optional[State] = None
    # data type: UserDisplayName1
    oneof_schema_8_validator: Optional[UserDisplayName1] = None
    # data type: UserId1
    oneof_schema_9_validator: Optional[UserId1] = None
    # data type: UserOrganizationId1
    oneof_schema_10_validator: Optional[UserOrganizationId1] = None
    # data type: UserPreferredLoginName1
    oneof_schema_11_validator: Optional[UserPreferredLoginName1] = None
    actual_instance: Optional[Union[AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1]] = None
    one_of_schemas: Set[str] = { "AuthorizationIds", "OrganizationId2", "ProjectGrantId1", "ProjectId2", "ProjectName", "RoleKey", "State", "UserDisplayName1", "UserId1", "UserOrganizationId1", "UserPreferredLoginName1" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaAuthorizationServiceAuthorizationsSearchFilter.model_construct()
        error_messages = []
        match = 0
        # validate data type: AuthorizationIds
        if not isinstance(v, AuthorizationIds):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuthorizationIds`")
        else:
            match += 1
        # validate data type: OrganizationId2
        if not isinstance(v, OrganizationId2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OrganizationId2`")
        else:
            match += 1
        # validate data type: ProjectGrantId1
        if not isinstance(v, ProjectGrantId1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectGrantId1`")
        else:
            match += 1
        # validate data type: ProjectId2
        if not isinstance(v, ProjectId2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectId2`")
        else:
            match += 1
        # validate data type: ProjectName
        if not isinstance(v, ProjectName):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectName`")
        else:
            match += 1
        # validate data type: RoleKey
        if not isinstance(v, RoleKey):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RoleKey`")
        else:
            match += 1
        # validate data type: State
        if not isinstance(v, State):
            error_messages.append(f"Error! Input type `{type(v)}` is not `State`")
        else:
            match += 1
        # validate data type: UserDisplayName1
        if not isinstance(v, UserDisplayName1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDisplayName1`")
        else:
            match += 1
        # validate data type: UserId1
        if not isinstance(v, UserId1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserId1`")
        else:
            match += 1
        # validate data type: UserOrganizationId1
        if not isinstance(v, UserOrganizationId1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserOrganizationId1`")
        else:
            match += 1
        # validate data type: UserPreferredLoginName1
        if not isinstance(v, UserPreferredLoginName1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserPreferredLoginName1`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaAuthorizationServiceAuthorizationsSearchFilter with oneOf schemas: AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaAuthorizationServiceAuthorizationsSearchFilter with oneOf schemas: AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AuthorizationIds
        try:
            instance.actual_instance = AuthorizationIds.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OrganizationId2
        try:
            instance.actual_instance = OrganizationId2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectGrantId1
        try:
            instance.actual_instance = ProjectGrantId1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectId2
        try:
            instance.actual_instance = ProjectId2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectName
        try:
            instance.actual_instance = ProjectName.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RoleKey
        try:
            instance.actual_instance = RoleKey.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into State
        try:
            instance.actual_instance = State.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserDisplayName1
        try:
            instance.actual_instance = UserDisplayName1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserId1
        try:
            instance.actual_instance = UserId1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserOrganizationId1
        try:
            instance.actual_instance = UserOrganizationId1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserPreferredLoginName1
        try:
            instance.actual_instance = UserPreferredLoginName1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaAuthorizationServiceAuthorizationsSearchFilter with oneOf schemas: AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaAuthorizationServiceAuthorizationsSearchFilter with oneOf schemas: AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AuthorizationIds, OrganizationId2, ProjectGrantId1, ProjectId2, ProjectName, RoleKey, State, UserDisplayName1, UserId1, UserOrganizationId1, UserPreferredLoginName1]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


