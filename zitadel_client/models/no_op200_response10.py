# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from zitadel_client.models.beta_user_service_and_query import BetaUserServiceAndQuery
from zitadel_client.models.beta_user_service_display_name_query import BetaUserServiceDisplayNameQuery
from zitadel_client.models.beta_user_service_email_query import BetaUserServiceEmailQuery
from zitadel_client.models.beta_user_service_first_name_query import BetaUserServiceFirstNameQuery
from zitadel_client.models.beta_user_service_hashed_password import BetaUserServiceHashedPassword
from zitadel_client.models.beta_user_service_in_user_emails_query import BetaUserServiceInUserEmailsQuery
from zitadel_client.models.beta_user_service_in_user_id_query import BetaUserServiceInUserIDQuery
from zitadel_client.models.beta_user_service_last_name_query import BetaUserServiceLastNameQuery
from zitadel_client.models.beta_user_service_login_name_query import BetaUserServiceLoginNameQuery
from zitadel_client.models.beta_user_service_nick_name_query import BetaUserServiceNickNameQuery
from zitadel_client.models.beta_user_service_not_query import BetaUserServiceNotQuery
from zitadel_client.models.beta_user_service_or_query import BetaUserServiceOrQuery
from zitadel_client.models.beta_user_service_organization_id_query import BetaUserServiceOrganizationIdQuery
from zitadel_client.models.beta_user_service_password import BetaUserServicePassword
from zitadel_client.models.beta_user_service_phone_query import BetaUserServicePhoneQuery
from zitadel_client.models.beta_user_service_state_query import BetaUserServiceStateQuery
from zitadel_client.models.beta_user_service_type_query import BetaUserServiceTypeQuery
from zitadel_client.models.beta_user_service_user_name_query import BetaUserServiceUserNameQuery
from typing import Optional, Set
from typing_extensions import Self

class NoOp200Response10(BaseModel):
    """
    NoOp200Response10
    """ # noqa: E501
    var_05127f91_6a2f_474b_a3e5_915fb57212ad: Optional[BetaUserServiceAndQuery] = Field(default=None, alias="05127f91-6a2f-474b-a3e5-915fb57212ad")
    a5aabdf6_95cf_4ace_9fe7_5ed72a4c9a01: Optional[BetaUserServiceDisplayNameQuery] = Field(default=None, alias="a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01")
    b8372764_7a9d_4f58_a616_70f6b969a37c: Optional[BetaUserServiceEmailQuery] = Field(default=None, alias="b8372764-7a9d-4f58-a616-70f6b969a37c")
    var_2c065b9f_e3f9_465f_a9da_0ce575d3d663: Optional[BetaUserServiceFirstNameQuery] = Field(default=None, alias="2c065b9f-e3f9-465f-a9da-0ce575d3d663")
    e846ae87_71ce_4d74_b214_266d800527ec: Optional[BetaUserServiceHashedPassword] = Field(default=None, alias="e846ae87-71ce-4d74-b214-266d800527ec")
    var_6d00ed79_79ae_4d8d_9ce3_7ac4eeed9542: Optional[BetaUserServiceInUserEmailsQuery] = Field(default=None, alias="6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542")
    var_8a494898_2a0d_4dad_b790_3d6469ce25f5: Optional[BetaUserServiceInUserIDQuery] = Field(default=None, alias="8a494898-2a0d-4dad-b790-3d6469ce25f5")
    var_4b8a9594_8058_433e_91d3_dc1f5d53b322: Optional[BetaUserServiceLastNameQuery] = Field(default=None, alias="4b8a9594-8058-433e-91d3-dc1f5d53b322")
    var_4cc77205_3f10_473a_bf48_fe477be7a4d4: Optional[BetaUserServiceLoginNameQuery] = Field(default=None, alias="4cc77205-3f10-473a-bf48-fe477be7a4d4")
    var_6f44c10c_0afd_4583_83ea_56d93c49454e: Optional[BetaUserServiceNickNameQuery] = Field(default=None, alias="6f44c10c-0afd-4583-83ea-56d93c49454e")
    var_9dc2dfef_171c_4b18_8a19_96831ba64006: Optional[BetaUserServiceNotQuery] = Field(default=None, alias="9dc2dfef-171c-4b18-8a19-96831ba64006")
    ca2030a4_ccc9_40a6_a7ed_b9b715de108a: Optional[BetaUserServiceOrQuery] = Field(default=None, alias="ca2030a4-ccc9-40a6-a7ed-b9b715de108a")
    af771622_a653_4f6c_9c4b_977d30cc75b4: Optional[BetaUserServiceOrganizationIdQuery] = Field(default=None, alias="af771622-a653-4f6c-9c4b-977d30cc75b4")
    var_31ee205c_d749_4959_8065_421c075ac389: Optional[BetaUserServicePassword] = Field(default=None, alias="31ee205c-d749-4959-8065-421c075ac389")
    aabc666f_bb43_4a67_aa03_f3e2dc817633: Optional[BetaUserServicePhoneQuery] = Field(default=None, alias="aabc666f-bb43-4a67-aa03-f3e2dc817633")
    d83c1e19_8d13_4762_af5e_50605f56e45f: Optional[BetaUserServiceStateQuery] = Field(default=None, alias="d83c1e19-8d13-4762-af5e-50605f56e45f")
    var_09e10ccd_f7ea_4e98_952d_77c2e9ec218d: Optional[BetaUserServiceTypeQuery] = Field(default=None, alias="09e10ccd-f7ea-4e98-952d-77c2e9ec218d")
    var_0e456302_cb36_4fc4_a8c9_b333b2a1f1dc: Optional[BetaUserServiceUserNameQuery] = Field(default=None, alias="0e456302-cb36-4fc4-a8c9-b333b2a1f1dc")
    __properties: ClassVar[List[str]] = ["05127f91-6a2f-474b-a3e5-915fb57212ad", "a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01", "b8372764-7a9d-4f58-a616-70f6b969a37c", "2c065b9f-e3f9-465f-a9da-0ce575d3d663", "e846ae87-71ce-4d74-b214-266d800527ec", "6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542", "8a494898-2a0d-4dad-b790-3d6469ce25f5", "4b8a9594-8058-433e-91d3-dc1f5d53b322", "4cc77205-3f10-473a-bf48-fe477be7a4d4", "6f44c10c-0afd-4583-83ea-56d93c49454e", "9dc2dfef-171c-4b18-8a19-96831ba64006", "ca2030a4-ccc9-40a6-a7ed-b9b715de108a", "af771622-a653-4f6c-9c4b-977d30cc75b4", "31ee205c-d749-4959-8065-421c075ac389", "aabc666f-bb43-4a67-aa03-f3e2dc817633", "d83c1e19-8d13-4762-af5e-50605f56e45f", "09e10ccd-f7ea-4e98-952d-77c2e9ec218d", "0e456302-cb36-4fc4-a8c9-b333b2a1f1dc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoOp200Response10 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_05127f91_6a2f_474b_a3e5_915fb57212ad
        if self.var_05127f91_6a2f_474b_a3e5_915fb57212ad:
            _dict['05127f91-6a2f-474b-a3e5-915fb57212ad'] = self.var_05127f91_6a2f_474b_a3e5_915fb57212ad.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a5aabdf6_95cf_4ace_9fe7_5ed72a4c9a01
        if self.a5aabdf6_95cf_4ace_9fe7_5ed72a4c9a01:
            _dict['a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01'] = self.a5aabdf6_95cf_4ace_9fe7_5ed72a4c9a01.to_dict()
        # override the default output from pydantic by calling `to_dict()` of b8372764_7a9d_4f58_a616_70f6b969a37c
        if self.b8372764_7a9d_4f58_a616_70f6b969a37c:
            _dict['b8372764-7a9d-4f58-a616-70f6b969a37c'] = self.b8372764_7a9d_4f58_a616_70f6b969a37c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_2c065b9f_e3f9_465f_a9da_0ce575d3d663
        if self.var_2c065b9f_e3f9_465f_a9da_0ce575d3d663:
            _dict['2c065b9f-e3f9-465f-a9da-0ce575d3d663'] = self.var_2c065b9f_e3f9_465f_a9da_0ce575d3d663.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e846ae87_71ce_4d74_b214_266d800527ec
        if self.e846ae87_71ce_4d74_b214_266d800527ec:
            _dict['e846ae87-71ce-4d74-b214-266d800527ec'] = self.e846ae87_71ce_4d74_b214_266d800527ec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_6d00ed79_79ae_4d8d_9ce3_7ac4eeed9542
        if self.var_6d00ed79_79ae_4d8d_9ce3_7ac4eeed9542:
            _dict['6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542'] = self.var_6d00ed79_79ae_4d8d_9ce3_7ac4eeed9542.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_8a494898_2a0d_4dad_b790_3d6469ce25f5
        if self.var_8a494898_2a0d_4dad_b790_3d6469ce25f5:
            _dict['8a494898-2a0d-4dad-b790-3d6469ce25f5'] = self.var_8a494898_2a0d_4dad_b790_3d6469ce25f5.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_4b8a9594_8058_433e_91d3_dc1f5d53b322
        if self.var_4b8a9594_8058_433e_91d3_dc1f5d53b322:
            _dict['4b8a9594-8058-433e-91d3-dc1f5d53b322'] = self.var_4b8a9594_8058_433e_91d3_dc1f5d53b322.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_4cc77205_3f10_473a_bf48_fe477be7a4d4
        if self.var_4cc77205_3f10_473a_bf48_fe477be7a4d4:
            _dict['4cc77205-3f10-473a-bf48-fe477be7a4d4'] = self.var_4cc77205_3f10_473a_bf48_fe477be7a4d4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_6f44c10c_0afd_4583_83ea_56d93c49454e
        if self.var_6f44c10c_0afd_4583_83ea_56d93c49454e:
            _dict['6f44c10c-0afd-4583-83ea-56d93c49454e'] = self.var_6f44c10c_0afd_4583_83ea_56d93c49454e.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_9dc2dfef_171c_4b18_8a19_96831ba64006
        if self.var_9dc2dfef_171c_4b18_8a19_96831ba64006:
            _dict['9dc2dfef-171c-4b18-8a19-96831ba64006'] = self.var_9dc2dfef_171c_4b18_8a19_96831ba64006.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ca2030a4_ccc9_40a6_a7ed_b9b715de108a
        if self.ca2030a4_ccc9_40a6_a7ed_b9b715de108a:
            _dict['ca2030a4-ccc9-40a6-a7ed-b9b715de108a'] = self.ca2030a4_ccc9_40a6_a7ed_b9b715de108a.to_dict()
        # override the default output from pydantic by calling `to_dict()` of af771622_a653_4f6c_9c4b_977d30cc75b4
        if self.af771622_a653_4f6c_9c4b_977d30cc75b4:
            _dict['af771622-a653-4f6c-9c4b-977d30cc75b4'] = self.af771622_a653_4f6c_9c4b_977d30cc75b4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_31ee205c_d749_4959_8065_421c075ac389
        if self.var_31ee205c_d749_4959_8065_421c075ac389:
            _dict['31ee205c-d749-4959-8065-421c075ac389'] = self.var_31ee205c_d749_4959_8065_421c075ac389.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aabc666f_bb43_4a67_aa03_f3e2dc817633
        if self.aabc666f_bb43_4a67_aa03_f3e2dc817633:
            _dict['aabc666f-bb43-4a67-aa03-f3e2dc817633'] = self.aabc666f_bb43_4a67_aa03_f3e2dc817633.to_dict()
        # override the default output from pydantic by calling `to_dict()` of d83c1e19_8d13_4762_af5e_50605f56e45f
        if self.d83c1e19_8d13_4762_af5e_50605f56e45f:
            _dict['d83c1e19-8d13-4762-af5e-50605f56e45f'] = self.d83c1e19_8d13_4762_af5e_50605f56e45f.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_09e10ccd_f7ea_4e98_952d_77c2e9ec218d
        if self.var_09e10ccd_f7ea_4e98_952d_77c2e9ec218d:
            _dict['09e10ccd-f7ea-4e98-952d-77c2e9ec218d'] = self.var_09e10ccd_f7ea_4e98_952d_77c2e9ec218d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_0e456302_cb36_4fc4_a8c9_b333b2a1f1dc
        if self.var_0e456302_cb36_4fc4_a8c9_b333b2a1f1dc:
            _dict['0e456302-cb36-4fc4-a8c9-b333b2a1f1dc'] = self.var_0e456302_cb36_4fc4_a8c9_b333b2a1f1dc.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoOp200Response10 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "05127f91-6a2f-474b-a3e5-915fb57212ad": BetaUserServiceAndQuery.from_dict(obj["05127f91-6a2f-474b-a3e5-915fb57212ad"]) if obj.get("05127f91-6a2f-474b-a3e5-915fb57212ad") is not None else None,
            "a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01": BetaUserServiceDisplayNameQuery.from_dict(obj["a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01"]) if obj.get("a5aabdf6-95cf-4ace-9fe7-5ed72a4c9a01") is not None else None,
            "b8372764-7a9d-4f58-a616-70f6b969a37c": BetaUserServiceEmailQuery.from_dict(obj["b8372764-7a9d-4f58-a616-70f6b969a37c"]) if obj.get("b8372764-7a9d-4f58-a616-70f6b969a37c") is not None else None,
            "2c065b9f-e3f9-465f-a9da-0ce575d3d663": BetaUserServiceFirstNameQuery.from_dict(obj["2c065b9f-e3f9-465f-a9da-0ce575d3d663"]) if obj.get("2c065b9f-e3f9-465f-a9da-0ce575d3d663") is not None else None,
            "e846ae87-71ce-4d74-b214-266d800527ec": BetaUserServiceHashedPassword.from_dict(obj["e846ae87-71ce-4d74-b214-266d800527ec"]) if obj.get("e846ae87-71ce-4d74-b214-266d800527ec") is not None else None,
            "6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542": BetaUserServiceInUserEmailsQuery.from_dict(obj["6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542"]) if obj.get("6d00ed79-79ae-4d8d-9ce3-7ac4eeed9542") is not None else None,
            "8a494898-2a0d-4dad-b790-3d6469ce25f5": BetaUserServiceInUserIDQuery.from_dict(obj["8a494898-2a0d-4dad-b790-3d6469ce25f5"]) if obj.get("8a494898-2a0d-4dad-b790-3d6469ce25f5") is not None else None,
            "4b8a9594-8058-433e-91d3-dc1f5d53b322": BetaUserServiceLastNameQuery.from_dict(obj["4b8a9594-8058-433e-91d3-dc1f5d53b322"]) if obj.get("4b8a9594-8058-433e-91d3-dc1f5d53b322") is not None else None,
            "4cc77205-3f10-473a-bf48-fe477be7a4d4": BetaUserServiceLoginNameQuery.from_dict(obj["4cc77205-3f10-473a-bf48-fe477be7a4d4"]) if obj.get("4cc77205-3f10-473a-bf48-fe477be7a4d4") is not None else None,
            "6f44c10c-0afd-4583-83ea-56d93c49454e": BetaUserServiceNickNameQuery.from_dict(obj["6f44c10c-0afd-4583-83ea-56d93c49454e"]) if obj.get("6f44c10c-0afd-4583-83ea-56d93c49454e") is not None else None,
            "9dc2dfef-171c-4b18-8a19-96831ba64006": BetaUserServiceNotQuery.from_dict(obj["9dc2dfef-171c-4b18-8a19-96831ba64006"]) if obj.get("9dc2dfef-171c-4b18-8a19-96831ba64006") is not None else None,
            "ca2030a4-ccc9-40a6-a7ed-b9b715de108a": BetaUserServiceOrQuery.from_dict(obj["ca2030a4-ccc9-40a6-a7ed-b9b715de108a"]) if obj.get("ca2030a4-ccc9-40a6-a7ed-b9b715de108a") is not None else None,
            "af771622-a653-4f6c-9c4b-977d30cc75b4": BetaUserServiceOrganizationIdQuery.from_dict(obj["af771622-a653-4f6c-9c4b-977d30cc75b4"]) if obj.get("af771622-a653-4f6c-9c4b-977d30cc75b4") is not None else None,
            "31ee205c-d749-4959-8065-421c075ac389": BetaUserServicePassword.from_dict(obj["31ee205c-d749-4959-8065-421c075ac389"]) if obj.get("31ee205c-d749-4959-8065-421c075ac389") is not None else None,
            "aabc666f-bb43-4a67-aa03-f3e2dc817633": BetaUserServicePhoneQuery.from_dict(obj["aabc666f-bb43-4a67-aa03-f3e2dc817633"]) if obj.get("aabc666f-bb43-4a67-aa03-f3e2dc817633") is not None else None,
            "d83c1e19-8d13-4762-af5e-50605f56e45f": BetaUserServiceStateQuery.from_dict(obj["d83c1e19-8d13-4762-af5e-50605f56e45f"]) if obj.get("d83c1e19-8d13-4762-af5e-50605f56e45f") is not None else None,
            "09e10ccd-f7ea-4e98-952d-77c2e9ec218d": BetaUserServiceTypeQuery.from_dict(obj["09e10ccd-f7ea-4e98-952d-77c2e9ec218d"]) if obj.get("09e10ccd-f7ea-4e98-952d-77c2e9ec218d") is not None else None,
            "0e456302-cb36-4fc4-a8c9-b333b2a1f1dc": BetaUserServiceUserNameQuery.from_dict(obj["0e456302-cb36-4fc4-a8c9-b333b2a1f1dc"]) if obj.get("0e456302-cb36-4fc4-a8c9-b333b2a1f1dc") is not None else None
        })
        return _obj


