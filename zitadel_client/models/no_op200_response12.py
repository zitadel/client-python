# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from zitadel_client.models.beta_organization_service_assigned_admin import BetaOrganizationServiceAssignedAdmin
from zitadel_client.models.beta_organization_service_created_admin import BetaOrganizationServiceCreatedAdmin
from zitadel_client.models.beta_organization_service_domain_name_filter import BetaOrganizationServiceDomainNameFilter
from zitadel_client.models.beta_organization_service_metadata_key_query import BetaOrganizationServiceMetadataKeyQuery
from zitadel_client.models.beta_organization_service_org_domain_filter import BetaOrganizationServiceOrgDomainFilter
from zitadel_client.models.beta_organization_service_org_id_filter import BetaOrganizationServiceOrgIDFilter
from zitadel_client.models.beta_organization_service_org_name_filter import BetaOrganizationServiceOrgNameFilter
from zitadel_client.models.beta_organization_service_org_state_filter import BetaOrganizationServiceOrgStateFilter
from typing import Optional, Set
from typing_extensions import Self

class NoOp200Response12(BaseModel):
    """
    NoOp200Response12
    """ # noqa: E501
    da2b9f62_182b_49a4_a1da_1aabb5ba1c3c: Optional[BetaOrganizationServiceAssignedAdmin] = Field(default=None, alias="da2b9f62-182b-49a4-a1da-1aabb5ba1c3c")
    var_185d5efd_5934_42be_a663_8a516615bf63: Optional[BetaOrganizationServiceCreatedAdmin] = Field(default=None, alias="185d5efd-5934-42be-a663-8a516615bf63")
    var_5b06ae29_f433_4c65_8b06_149b515cec2b: Optional[BetaOrganizationServiceDomainNameFilter] = Field(default=None, alias="5b06ae29-f433-4c65-8b06-149b515cec2b")
    d7642a68_c647_420b_89eb_1a428c9149a7: Optional[BetaOrganizationServiceMetadataKeyQuery] = Field(default=None, alias="d7642a68-c647-420b-89eb-1a428c9149a7")
    e83f70f1_8acd_42fc_9551_5b6969c3be2e: Optional[BetaOrganizationServiceOrgDomainFilter] = Field(default=None, alias="e83f70f1-8acd-42fc-9551-5b6969c3be2e")
    var_55b4d06e_75d1_4207_92a7_74caa1959fa0: Optional[BetaOrganizationServiceOrgIDFilter] = Field(default=None, alias="55b4d06e-75d1-4207-92a7-74caa1959fa0")
    ed2b22e1_3c5a_40da_a144_9b05f8c7747d: Optional[BetaOrganizationServiceOrgNameFilter] = Field(default=None, alias="ed2b22e1-3c5a-40da-a144-9b05f8c7747d")
    b7a2e503_882e_4a46_a29a_c50ee3057ef1: Optional[BetaOrganizationServiceOrgStateFilter] = Field(default=None, alias="b7a2e503-882e-4a46-a29a-c50ee3057ef1")
    __properties: ClassVar[List[str]] = ["da2b9f62-182b-49a4-a1da-1aabb5ba1c3c", "185d5efd-5934-42be-a663-8a516615bf63", "5b06ae29-f433-4c65-8b06-149b515cec2b", "d7642a68-c647-420b-89eb-1a428c9149a7", "e83f70f1-8acd-42fc-9551-5b6969c3be2e", "55b4d06e-75d1-4207-92a7-74caa1959fa0", "ed2b22e1-3c5a-40da-a144-9b05f8c7747d", "b7a2e503-882e-4a46-a29a-c50ee3057ef1"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoOp200Response12 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of da2b9f62_182b_49a4_a1da_1aabb5ba1c3c
        if self.da2b9f62_182b_49a4_a1da_1aabb5ba1c3c:
            _dict['da2b9f62-182b-49a4-a1da-1aabb5ba1c3c'] = self.da2b9f62_182b_49a4_a1da_1aabb5ba1c3c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_185d5efd_5934_42be_a663_8a516615bf63
        if self.var_185d5efd_5934_42be_a663_8a516615bf63:
            _dict['185d5efd-5934-42be-a663-8a516615bf63'] = self.var_185d5efd_5934_42be_a663_8a516615bf63.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_5b06ae29_f433_4c65_8b06_149b515cec2b
        if self.var_5b06ae29_f433_4c65_8b06_149b515cec2b:
            _dict['5b06ae29-f433-4c65-8b06-149b515cec2b'] = self.var_5b06ae29_f433_4c65_8b06_149b515cec2b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of d7642a68_c647_420b_89eb_1a428c9149a7
        if self.d7642a68_c647_420b_89eb_1a428c9149a7:
            _dict['d7642a68-c647-420b-89eb-1a428c9149a7'] = self.d7642a68_c647_420b_89eb_1a428c9149a7.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e83f70f1_8acd_42fc_9551_5b6969c3be2e
        if self.e83f70f1_8acd_42fc_9551_5b6969c3be2e:
            _dict['e83f70f1-8acd-42fc-9551-5b6969c3be2e'] = self.e83f70f1_8acd_42fc_9551_5b6969c3be2e.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_55b4d06e_75d1_4207_92a7_74caa1959fa0
        if self.var_55b4d06e_75d1_4207_92a7_74caa1959fa0:
            _dict['55b4d06e-75d1-4207-92a7-74caa1959fa0'] = self.var_55b4d06e_75d1_4207_92a7_74caa1959fa0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ed2b22e1_3c5a_40da_a144_9b05f8c7747d
        if self.ed2b22e1_3c5a_40da_a144_9b05f8c7747d:
            _dict['ed2b22e1-3c5a-40da-a144-9b05f8c7747d'] = self.ed2b22e1_3c5a_40da_a144_9b05f8c7747d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of b7a2e503_882e_4a46_a29a_c50ee3057ef1
        if self.b7a2e503_882e_4a46_a29a_c50ee3057ef1:
            _dict['b7a2e503-882e-4a46-a29a-c50ee3057ef1'] = self.b7a2e503_882e_4a46_a29a_c50ee3057ef1.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoOp200Response12 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "da2b9f62-182b-49a4-a1da-1aabb5ba1c3c": BetaOrganizationServiceAssignedAdmin.from_dict(obj["da2b9f62-182b-49a4-a1da-1aabb5ba1c3c"]) if obj.get("da2b9f62-182b-49a4-a1da-1aabb5ba1c3c") is not None else None,
            "185d5efd-5934-42be-a663-8a516615bf63": BetaOrganizationServiceCreatedAdmin.from_dict(obj["185d5efd-5934-42be-a663-8a516615bf63"]) if obj.get("185d5efd-5934-42be-a663-8a516615bf63") is not None else None,
            "5b06ae29-f433-4c65-8b06-149b515cec2b": BetaOrganizationServiceDomainNameFilter.from_dict(obj["5b06ae29-f433-4c65-8b06-149b515cec2b"]) if obj.get("5b06ae29-f433-4c65-8b06-149b515cec2b") is not None else None,
            "d7642a68-c647-420b-89eb-1a428c9149a7": BetaOrganizationServiceMetadataKeyQuery.from_dict(obj["d7642a68-c647-420b-89eb-1a428c9149a7"]) if obj.get("d7642a68-c647-420b-89eb-1a428c9149a7") is not None else None,
            "e83f70f1-8acd-42fc-9551-5b6969c3be2e": BetaOrganizationServiceOrgDomainFilter.from_dict(obj["e83f70f1-8acd-42fc-9551-5b6969c3be2e"]) if obj.get("e83f70f1-8acd-42fc-9551-5b6969c3be2e") is not None else None,
            "55b4d06e-75d1-4207-92a7-74caa1959fa0": BetaOrganizationServiceOrgIDFilter.from_dict(obj["55b4d06e-75d1-4207-92a7-74caa1959fa0"]) if obj.get("55b4d06e-75d1-4207-92a7-74caa1959fa0") is not None else None,
            "ed2b22e1-3c5a-40da-a144-9b05f8c7747d": BetaOrganizationServiceOrgNameFilter.from_dict(obj["ed2b22e1-3c5a-40da-a144-9b05f8c7747d"]) if obj.get("ed2b22e1-3c5a-40da-a144-9b05f8c7747d") is not None else None,
            "b7a2e503-882e-4a46-a29a-c50ee3057ef1": BetaOrganizationServiceOrgStateFilter.from_dict(obj["b7a2e503-882e-4a46-a29a-c50ee3057ef1"]) if obj.get("b7a2e503-882e-4a46-a29a-c50ee3057ef1") is not None else None
        })
        return _obj


