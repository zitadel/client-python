# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from zitadel_client.models.v2_creation_date_query import V2CreationDateQuery
from zitadel_client.models.v2_creator_query import V2CreatorQuery
from zitadel_client.models.v2_ids_query import V2IDsQuery
from zitadel_client.models.v2_user_agent_query import V2UserAgentQuery
from zitadel_client.models.v2_user_id_query import V2UserIDQuery
from typing import Optional, Set
from typing_extensions import Self

class V2SearchQuery(BaseModel):
    """
    V2SearchQuery
    """ # noqa: E501
    ids_query: Optional[V2IDsQuery] = Field(default=None, alias="idsQuery")
    user_id_query: Optional[V2UserIDQuery] = Field(default=None, alias="userIdQuery")
    creation_date_query: Optional[V2CreationDateQuery] = Field(default=None, alias="creationDateQuery")
    creator_query: Optional[V2CreatorQuery] = Field(default=None, alias="creatorQuery")
    user_agent_query: Optional[V2UserAgentQuery] = Field(default=None, alias="userAgentQuery")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["idsQuery", "userIdQuery", "creationDateQuery", "creatorQuery", "userAgentQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2SearchQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ids_query
        if self.ids_query:
            _dict['idsQuery'] = self.ids_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_id_query
        if self.user_id_query:
            _dict['userIdQuery'] = self.user_id_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creation_date_query
        if self.creation_date_query:
            _dict['creationDateQuery'] = self.creation_date_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creator_query
        if self.creator_query:
            _dict['creatorQuery'] = self.creator_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_agent_query
        if self.user_agent_query:
            _dict['userAgentQuery'] = self.user_agent_query.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2SearchQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "idsQuery": V2IDsQuery.from_dict(obj["idsQuery"]) if obj.get("idsQuery") is not None else None,
            "userIdQuery": V2UserIDQuery.from_dict(obj["userIdQuery"]) if obj.get("userIdQuery") is not None else None,
            "creationDateQuery": V2CreationDateQuery.from_dict(obj["creationDateQuery"]) if obj.get("creationDateQuery") is not None else None,
            "creatorQuery": V2CreatorQuery.from_dict(obj["creatorQuery"]) if obj.get("creatorQuery") is not None else None,
            "userAgentQuery": V2UserAgentQuery.from_dict(obj["userAgentQuery"]) if obj.get("userAgentQuery") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


