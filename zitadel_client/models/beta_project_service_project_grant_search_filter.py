# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.in_project_ids_filter import InProjectIdsFilter
from zitadel_client.models.project_grant_resource_owner_filter import ProjectGrantResourceOwnerFilter
from zitadel_client.models.project_name_filter import ProjectNameFilter
from zitadel_client.models.project_resource_owner_filter import ProjectResourceOwnerFilter
from zitadel_client.models.role_key_filter import RoleKeyFilter
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
BETAPROJECTSERVICEPROJECTGRANTSEARCHFILTER_ONE_OF_SCHEMAS = ["InProjectIdsFilter", "ProjectGrantResourceOwnerFilter", "ProjectNameFilter", "ProjectResourceOwnerFilter", "RoleKeyFilter"]

class BetaProjectServiceProjectGrantSearchFilter(BaseModel):
    """
    BetaProjectServiceProjectGrantSearchFilter
    """
    # data type: InProjectIdsFilter
    oneof_schema_1_validator: Optional[InProjectIdsFilter] = None
    # data type: ProjectGrantResourceOwnerFilter
    oneof_schema_2_validator: Optional[ProjectGrantResourceOwnerFilter] = None
    # data type: ProjectNameFilter
    oneof_schema_3_validator: Optional[ProjectNameFilter] = None
    # data type: ProjectResourceOwnerFilter
    oneof_schema_4_validator: Optional[ProjectResourceOwnerFilter] = None
    # data type: RoleKeyFilter
    oneof_schema_5_validator: Optional[RoleKeyFilter] = None
    actual_instance: Optional[Union[InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter]] = None
    one_of_schemas: Set[str] = { "InProjectIdsFilter", "ProjectGrantResourceOwnerFilter", "ProjectNameFilter", "ProjectResourceOwnerFilter", "RoleKeyFilter" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaProjectServiceProjectGrantSearchFilter.model_construct()
        error_messages = []
        match = 0
        # validate data type: InProjectIdsFilter
        if not isinstance(v, InProjectIdsFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InProjectIdsFilter`")
        else:
            match += 1
        # validate data type: ProjectGrantResourceOwnerFilter
        if not isinstance(v, ProjectGrantResourceOwnerFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectGrantResourceOwnerFilter`")
        else:
            match += 1
        # validate data type: ProjectNameFilter
        if not isinstance(v, ProjectNameFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectNameFilter`")
        else:
            match += 1
        # validate data type: ProjectResourceOwnerFilter
        if not isinstance(v, ProjectResourceOwnerFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProjectResourceOwnerFilter`")
        else:
            match += 1
        # validate data type: RoleKeyFilter
        if not isinstance(v, RoleKeyFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RoleKeyFilter`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaProjectServiceProjectGrantSearchFilter with oneOf schemas: InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaProjectServiceProjectGrantSearchFilter with oneOf schemas: InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into InProjectIdsFilter
        try:
            instance.actual_instance = InProjectIdsFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectGrantResourceOwnerFilter
        try:
            instance.actual_instance = ProjectGrantResourceOwnerFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectNameFilter
        try:
            instance.actual_instance = ProjectNameFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProjectResourceOwnerFilter
        try:
            instance.actual_instance = ProjectResourceOwnerFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RoleKeyFilter
        try:
            instance.actual_instance = RoleKeyFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaProjectServiceProjectGrantSearchFilter with oneOf schemas: InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaProjectServiceProjectGrantSearchFilter with oneOf schemas: InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], InProjectIdsFilter, ProjectGrantResourceOwnerFilter, ProjectNameFilter, ProjectResourceOwnerFilter, RoleKeyFilter]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


