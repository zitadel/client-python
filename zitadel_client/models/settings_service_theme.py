# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SettingsServiceTheme(BaseModel):
    """
    SettingsServiceTheme
    """ # noqa: E501
    primary_color: Optional[StrictStr] = Field(default=None, description="hex value for primary color", alias="primaryColor")
    background_color: Optional[StrictStr] = Field(default=None, description="hex value for background color", alias="backgroundColor")
    warn_color: Optional[StrictStr] = Field(default=None, description="hex value for warn color", alias="warnColor")
    font_color: Optional[StrictStr] = Field(default=None, description="hex value for font color", alias="fontColor")
    logo_url: Optional[StrictStr] = Field(default=None, description="url to the logo", alias="logoUrl")
    icon_url: Optional[StrictStr] = Field(default=None, description="url to the icon", alias="iconUrl")

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SettingsServiceTheme from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SettingsServiceTheme from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "primaryColor": obj.get("primaryColor"),
            "backgroundColor": obj.get("backgroundColor"),
            "warnColor": obj.get("warnColor"),
            "fontColor": obj.get("fontColor"),
            "logoUrl": obj.get("logoUrl"),
            "iconUrl": obj.get("iconUrl")
        })
        return _obj


