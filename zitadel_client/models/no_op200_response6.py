# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from zitadel_client.models.user_service_and_query import UserServiceAndQuery
from zitadel_client.models.user_service_display_name_query import UserServiceDisplayNameQuery
from zitadel_client.models.user_service_email_query import UserServiceEmailQuery
from zitadel_client.models.user_service_first_name_query import UserServiceFirstNameQuery
from zitadel_client.models.user_service_hashed_password import UserServiceHashedPassword
from zitadel_client.models.user_service_id_filter import UserServiceIDFilter
from zitadel_client.models.user_service_in_user_emails_query import UserServiceInUserEmailsQuery
from zitadel_client.models.user_service_in_user_id_query import UserServiceInUserIDQuery
from zitadel_client.models.user_service_last_name_query import UserServiceLastNameQuery
from zitadel_client.models.user_service_login_name_query import UserServiceLoginNameQuery
from zitadel_client.models.user_service_metadata_key_filter import UserServiceMetadataKeyFilter
from zitadel_client.models.user_service_nick_name_query import UserServiceNickNameQuery
from zitadel_client.models.user_service_not_query import UserServiceNotQuery
from zitadel_client.models.user_service_or_query import UserServiceOrQuery
from zitadel_client.models.user_service_organization_id_query import UserServiceOrganizationIdQuery
from zitadel_client.models.user_service_password import UserServicePassword
from zitadel_client.models.user_service_phone_query import UserServicePhoneQuery
from zitadel_client.models.user_service_state_query import UserServiceStateQuery
from zitadel_client.models.user_service_timestamp_filter import UserServiceTimestampFilter
from zitadel_client.models.user_service_type_query import UserServiceTypeQuery
from zitadel_client.models.user_service_user_name_query import UserServiceUserNameQuery
from typing import Optional, Set
from typing_extensions import Self

class NoOp200Response6(BaseModel):
    """
    NoOp200Response6
    """ # noqa: E501
    b87baf19_2d29_4103_a56b_f09bd53f8726: Optional[UserServiceAndQuery] = Field(default=None, alias="b87baf19-2d29-4103-a56b-f09bd53f8726")
    d24eb51a_add3_44b5_9834_06b61373a35e: Optional[UserServiceDisplayNameQuery] = Field(default=None, alias="d24eb51a-add3-44b5-9834-06b61373a35e")
    a3957abf_dd07_4536_b7b5_ca10a94a58a6: Optional[UserServiceEmailQuery] = Field(default=None, alias="a3957abf-dd07-4536-b7b5-ca10a94a58a6")
    e4368f93_98ea_4586_b7eb_648f43519088: Optional[UserServiceFirstNameQuery] = Field(default=None, alias="e4368f93-98ea-4586-b7eb-648f43519088")
    e2192fa4_5b03_4212_8f79_7353b3b430f0: Optional[UserServiceHashedPassword] = Field(default=None, alias="e2192fa4-5b03-4212-8f79-7353b3b430f0")
    a3b8c730_4473_473d_bc1f_43b36c5623fc: Optional[UserServiceIDFilter] = Field(default=None, alias="a3b8c730-4473-473d-bc1f-43b36c5623fc")
    b701f247_56ba_4a56_9f59_27aaba5f62e4: Optional[UserServiceInUserEmailsQuery] = Field(default=None, alias="b701f247-56ba-4a56-9f59-27aaba5f62e4")
    d094c106_6d64_4c81_9cc7_c9d9b96ccbff: Optional[UserServiceInUserIDQuery] = Field(default=None, alias="d094c106-6d64-4c81-9cc7-c9d9b96ccbff")
    var_47e89eb6_2f08_4830_b81d_1cd94fe37ee8: Optional[UserServiceLastNameQuery] = Field(default=None, alias="47e89eb6-2f08-4830-b81d-1cd94fe37ee8")
    e451619b_b6bf_4bc3_9911_1c69c5fbb11c: Optional[UserServiceLoginNameQuery] = Field(default=None, alias="e451619b-b6bf-4bc3-9911-1c69c5fbb11c")
    var_168f0ba4_5abe_4bdd_ae8f_c48353c6e981: Optional[UserServiceMetadataKeyFilter] = Field(default=None, alias="168f0ba4-5abe-4bdd-ae8f-c48353c6e981")
    var_833dd409_9b58_4b84_8a8c_3ed73f693400: Optional[UserServiceNickNameQuery] = Field(default=None, alias="833dd409-9b58-4b84-8a8c-3ed73f693400")
    dcf25364_42a1_45d2_8bfa_09d6129a579b: Optional[UserServiceNotQuery] = Field(default=None, alias="dcf25364-42a1-45d2-8bfa-09d6129a579b")
    var_45e7eafe_5022_4c89_953d_c19513a32c3b: Optional[UserServiceOrQuery] = Field(default=None, alias="45e7eafe-5022-4c89-953d-c19513a32c3b")
    var_18726358_54da_4a95_aa70_03d54280cb18: Optional[UserServiceOrganizationIdQuery] = Field(default=None, alias="18726358-54da-4a95-aa70-03d54280cb18")
    e9ccadf1_b401_4bbb_bc01_b13c81e73250: Optional[UserServicePassword] = Field(default=None, alias="e9ccadf1-b401-4bbb-bc01-b13c81e73250")
    var_6ce29abc_876f_4450_baf9_b17114390cf0: Optional[UserServicePhoneQuery] = Field(default=None, alias="6ce29abc-876f-4450-baf9-b17114390cf0")
    e112ea5e_1df8_4d65_a537_96954d693a18: Optional[UserServiceStateQuery] = Field(default=None, alias="e112ea5e-1df8-4d65-a537-96954d693a18")
    var_0529ce8b_0799_4e85_b255_cc919572b730: Optional[UserServiceTimestampFilter] = Field(default=None, alias="0529ce8b-0799-4e85-b255-cc919572b730")
    var_8215893f_0963_4887_aaf1_697bc92d6378: Optional[UserServiceTypeQuery] = Field(default=None, alias="8215893f-0963-4887-aaf1-697bc92d6378")
    b989a5fb_f1af_40a0_bf6c_25942ba06127: Optional[UserServiceUserNameQuery] = Field(default=None, alias="b989a5fb-f1af-40a0-bf6c-25942ba06127")
    __properties: ClassVar[List[str]] = ["b87baf19-2d29-4103-a56b-f09bd53f8726", "d24eb51a-add3-44b5-9834-06b61373a35e", "a3957abf-dd07-4536-b7b5-ca10a94a58a6", "e4368f93-98ea-4586-b7eb-648f43519088", "e2192fa4-5b03-4212-8f79-7353b3b430f0", "a3b8c730-4473-473d-bc1f-43b36c5623fc", "b701f247-56ba-4a56-9f59-27aaba5f62e4", "d094c106-6d64-4c81-9cc7-c9d9b96ccbff", "47e89eb6-2f08-4830-b81d-1cd94fe37ee8", "e451619b-b6bf-4bc3-9911-1c69c5fbb11c", "168f0ba4-5abe-4bdd-ae8f-c48353c6e981", "833dd409-9b58-4b84-8a8c-3ed73f693400", "dcf25364-42a1-45d2-8bfa-09d6129a579b", "45e7eafe-5022-4c89-953d-c19513a32c3b", "18726358-54da-4a95-aa70-03d54280cb18", "e9ccadf1-b401-4bbb-bc01-b13c81e73250", "6ce29abc-876f-4450-baf9-b17114390cf0", "e112ea5e-1df8-4d65-a537-96954d693a18", "0529ce8b-0799-4e85-b255-cc919572b730", "8215893f-0963-4887-aaf1-697bc92d6378", "b989a5fb-f1af-40a0-bf6c-25942ba06127"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoOp200Response6 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of b87baf19_2d29_4103_a56b_f09bd53f8726
        if self.b87baf19_2d29_4103_a56b_f09bd53f8726:
            _dict['b87baf19-2d29-4103-a56b-f09bd53f8726'] = self.b87baf19_2d29_4103_a56b_f09bd53f8726.to_dict()
        # override the default output from pydantic by calling `to_dict()` of d24eb51a_add3_44b5_9834_06b61373a35e
        if self.d24eb51a_add3_44b5_9834_06b61373a35e:
            _dict['d24eb51a-add3-44b5-9834-06b61373a35e'] = self.d24eb51a_add3_44b5_9834_06b61373a35e.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a3957abf_dd07_4536_b7b5_ca10a94a58a6
        if self.a3957abf_dd07_4536_b7b5_ca10a94a58a6:
            _dict['a3957abf-dd07-4536-b7b5-ca10a94a58a6'] = self.a3957abf_dd07_4536_b7b5_ca10a94a58a6.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e4368f93_98ea_4586_b7eb_648f43519088
        if self.e4368f93_98ea_4586_b7eb_648f43519088:
            _dict['e4368f93-98ea-4586-b7eb-648f43519088'] = self.e4368f93_98ea_4586_b7eb_648f43519088.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e2192fa4_5b03_4212_8f79_7353b3b430f0
        if self.e2192fa4_5b03_4212_8f79_7353b3b430f0:
            _dict['e2192fa4-5b03-4212-8f79-7353b3b430f0'] = self.e2192fa4_5b03_4212_8f79_7353b3b430f0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of a3b8c730_4473_473d_bc1f_43b36c5623fc
        if self.a3b8c730_4473_473d_bc1f_43b36c5623fc:
            _dict['a3b8c730-4473-473d-bc1f-43b36c5623fc'] = self.a3b8c730_4473_473d_bc1f_43b36c5623fc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of b701f247_56ba_4a56_9f59_27aaba5f62e4
        if self.b701f247_56ba_4a56_9f59_27aaba5f62e4:
            _dict['b701f247-56ba-4a56-9f59-27aaba5f62e4'] = self.b701f247_56ba_4a56_9f59_27aaba5f62e4.to_dict()
        # override the default output from pydantic by calling `to_dict()` of d094c106_6d64_4c81_9cc7_c9d9b96ccbff
        if self.d094c106_6d64_4c81_9cc7_c9d9b96ccbff:
            _dict['d094c106-6d64-4c81-9cc7-c9d9b96ccbff'] = self.d094c106_6d64_4c81_9cc7_c9d9b96ccbff.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_47e89eb6_2f08_4830_b81d_1cd94fe37ee8
        if self.var_47e89eb6_2f08_4830_b81d_1cd94fe37ee8:
            _dict['47e89eb6-2f08-4830-b81d-1cd94fe37ee8'] = self.var_47e89eb6_2f08_4830_b81d_1cd94fe37ee8.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e451619b_b6bf_4bc3_9911_1c69c5fbb11c
        if self.e451619b_b6bf_4bc3_9911_1c69c5fbb11c:
            _dict['e451619b-b6bf-4bc3-9911-1c69c5fbb11c'] = self.e451619b_b6bf_4bc3_9911_1c69c5fbb11c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_168f0ba4_5abe_4bdd_ae8f_c48353c6e981
        if self.var_168f0ba4_5abe_4bdd_ae8f_c48353c6e981:
            _dict['168f0ba4-5abe-4bdd-ae8f-c48353c6e981'] = self.var_168f0ba4_5abe_4bdd_ae8f_c48353c6e981.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_833dd409_9b58_4b84_8a8c_3ed73f693400
        if self.var_833dd409_9b58_4b84_8a8c_3ed73f693400:
            _dict['833dd409-9b58-4b84-8a8c-3ed73f693400'] = self.var_833dd409_9b58_4b84_8a8c_3ed73f693400.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dcf25364_42a1_45d2_8bfa_09d6129a579b
        if self.dcf25364_42a1_45d2_8bfa_09d6129a579b:
            _dict['dcf25364-42a1-45d2-8bfa-09d6129a579b'] = self.dcf25364_42a1_45d2_8bfa_09d6129a579b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_45e7eafe_5022_4c89_953d_c19513a32c3b
        if self.var_45e7eafe_5022_4c89_953d_c19513a32c3b:
            _dict['45e7eafe-5022-4c89-953d-c19513a32c3b'] = self.var_45e7eafe_5022_4c89_953d_c19513a32c3b.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_18726358_54da_4a95_aa70_03d54280cb18
        if self.var_18726358_54da_4a95_aa70_03d54280cb18:
            _dict['18726358-54da-4a95-aa70-03d54280cb18'] = self.var_18726358_54da_4a95_aa70_03d54280cb18.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e9ccadf1_b401_4bbb_bc01_b13c81e73250
        if self.e9ccadf1_b401_4bbb_bc01_b13c81e73250:
            _dict['e9ccadf1-b401-4bbb-bc01-b13c81e73250'] = self.e9ccadf1_b401_4bbb_bc01_b13c81e73250.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_6ce29abc_876f_4450_baf9_b17114390cf0
        if self.var_6ce29abc_876f_4450_baf9_b17114390cf0:
            _dict['6ce29abc-876f-4450-baf9-b17114390cf0'] = self.var_6ce29abc_876f_4450_baf9_b17114390cf0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of e112ea5e_1df8_4d65_a537_96954d693a18
        if self.e112ea5e_1df8_4d65_a537_96954d693a18:
            _dict['e112ea5e-1df8-4d65-a537-96954d693a18'] = self.e112ea5e_1df8_4d65_a537_96954d693a18.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_0529ce8b_0799_4e85_b255_cc919572b730
        if self.var_0529ce8b_0799_4e85_b255_cc919572b730:
            _dict['0529ce8b-0799-4e85-b255-cc919572b730'] = self.var_0529ce8b_0799_4e85_b255_cc919572b730.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_8215893f_0963_4887_aaf1_697bc92d6378
        if self.var_8215893f_0963_4887_aaf1_697bc92d6378:
            _dict['8215893f-0963-4887-aaf1-697bc92d6378'] = self.var_8215893f_0963_4887_aaf1_697bc92d6378.to_dict()
        # override the default output from pydantic by calling `to_dict()` of b989a5fb_f1af_40a0_bf6c_25942ba06127
        if self.b989a5fb_f1af_40a0_bf6c_25942ba06127:
            _dict['b989a5fb-f1af-40a0-bf6c-25942ba06127'] = self.b989a5fb_f1af_40a0_bf6c_25942ba06127.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoOp200Response6 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "b87baf19-2d29-4103-a56b-f09bd53f8726": UserServiceAndQuery.from_dict(obj["b87baf19-2d29-4103-a56b-f09bd53f8726"]) if obj.get("b87baf19-2d29-4103-a56b-f09bd53f8726") is not None else None,
            "d24eb51a-add3-44b5-9834-06b61373a35e": UserServiceDisplayNameQuery.from_dict(obj["d24eb51a-add3-44b5-9834-06b61373a35e"]) if obj.get("d24eb51a-add3-44b5-9834-06b61373a35e") is not None else None,
            "a3957abf-dd07-4536-b7b5-ca10a94a58a6": UserServiceEmailQuery.from_dict(obj["a3957abf-dd07-4536-b7b5-ca10a94a58a6"]) if obj.get("a3957abf-dd07-4536-b7b5-ca10a94a58a6") is not None else None,
            "e4368f93-98ea-4586-b7eb-648f43519088": UserServiceFirstNameQuery.from_dict(obj["e4368f93-98ea-4586-b7eb-648f43519088"]) if obj.get("e4368f93-98ea-4586-b7eb-648f43519088") is not None else None,
            "e2192fa4-5b03-4212-8f79-7353b3b430f0": UserServiceHashedPassword.from_dict(obj["e2192fa4-5b03-4212-8f79-7353b3b430f0"]) if obj.get("e2192fa4-5b03-4212-8f79-7353b3b430f0") is not None else None,
            "a3b8c730-4473-473d-bc1f-43b36c5623fc": UserServiceIDFilter.from_dict(obj["a3b8c730-4473-473d-bc1f-43b36c5623fc"]) if obj.get("a3b8c730-4473-473d-bc1f-43b36c5623fc") is not None else None,
            "b701f247-56ba-4a56-9f59-27aaba5f62e4": UserServiceInUserEmailsQuery.from_dict(obj["b701f247-56ba-4a56-9f59-27aaba5f62e4"]) if obj.get("b701f247-56ba-4a56-9f59-27aaba5f62e4") is not None else None,
            "d094c106-6d64-4c81-9cc7-c9d9b96ccbff": UserServiceInUserIDQuery.from_dict(obj["d094c106-6d64-4c81-9cc7-c9d9b96ccbff"]) if obj.get("d094c106-6d64-4c81-9cc7-c9d9b96ccbff") is not None else None,
            "47e89eb6-2f08-4830-b81d-1cd94fe37ee8": UserServiceLastNameQuery.from_dict(obj["47e89eb6-2f08-4830-b81d-1cd94fe37ee8"]) if obj.get("47e89eb6-2f08-4830-b81d-1cd94fe37ee8") is not None else None,
            "e451619b-b6bf-4bc3-9911-1c69c5fbb11c": UserServiceLoginNameQuery.from_dict(obj["e451619b-b6bf-4bc3-9911-1c69c5fbb11c"]) if obj.get("e451619b-b6bf-4bc3-9911-1c69c5fbb11c") is not None else None,
            "168f0ba4-5abe-4bdd-ae8f-c48353c6e981": UserServiceMetadataKeyFilter.from_dict(obj["168f0ba4-5abe-4bdd-ae8f-c48353c6e981"]) if obj.get("168f0ba4-5abe-4bdd-ae8f-c48353c6e981") is not None else None,
            "833dd409-9b58-4b84-8a8c-3ed73f693400": UserServiceNickNameQuery.from_dict(obj["833dd409-9b58-4b84-8a8c-3ed73f693400"]) if obj.get("833dd409-9b58-4b84-8a8c-3ed73f693400") is not None else None,
            "dcf25364-42a1-45d2-8bfa-09d6129a579b": UserServiceNotQuery.from_dict(obj["dcf25364-42a1-45d2-8bfa-09d6129a579b"]) if obj.get("dcf25364-42a1-45d2-8bfa-09d6129a579b") is not None else None,
            "45e7eafe-5022-4c89-953d-c19513a32c3b": UserServiceOrQuery.from_dict(obj["45e7eafe-5022-4c89-953d-c19513a32c3b"]) if obj.get("45e7eafe-5022-4c89-953d-c19513a32c3b") is not None else None,
            "18726358-54da-4a95-aa70-03d54280cb18": UserServiceOrganizationIdQuery.from_dict(obj["18726358-54da-4a95-aa70-03d54280cb18"]) if obj.get("18726358-54da-4a95-aa70-03d54280cb18") is not None else None,
            "e9ccadf1-b401-4bbb-bc01-b13c81e73250": UserServicePassword.from_dict(obj["e9ccadf1-b401-4bbb-bc01-b13c81e73250"]) if obj.get("e9ccadf1-b401-4bbb-bc01-b13c81e73250") is not None else None,
            "6ce29abc-876f-4450-baf9-b17114390cf0": UserServicePhoneQuery.from_dict(obj["6ce29abc-876f-4450-baf9-b17114390cf0"]) if obj.get("6ce29abc-876f-4450-baf9-b17114390cf0") is not None else None,
            "e112ea5e-1df8-4d65-a537-96954d693a18": UserServiceStateQuery.from_dict(obj["e112ea5e-1df8-4d65-a537-96954d693a18"]) if obj.get("e112ea5e-1df8-4d65-a537-96954d693a18") is not None else None,
            "0529ce8b-0799-4e85-b255-cc919572b730": UserServiceTimestampFilter.from_dict(obj["0529ce8b-0799-4e85-b255-cc919572b730"]) if obj.get("0529ce8b-0799-4e85-b255-cc919572b730") is not None else None,
            "8215893f-0963-4887-aaf1-697bc92d6378": UserServiceTypeQuery.from_dict(obj["8215893f-0963-4887-aaf1-697bc92d6378"]) if obj.get("8215893f-0963-4887-aaf1-697bc92d6378") is not None else None,
            "b989a5fb-f1af-40a0-bf6c-25942ba06127": UserServiceUserNameQuery.from_dict(obj["b989a5fb-f1af-40a0-bf6c-25942ba06127"]) if obj.get("b989a5fb-f1af-40a0-bf6c-25942ba06127") is not None else None
        })
        return _obj


