# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, Optional
from zitadel_client.models.beta_session_service_creation_date_query import BetaSessionServiceCreationDateQuery
from zitadel_client.models.beta_session_service_ids_query import BetaSessionServiceIDsQuery
from zitadel_client.models.beta_session_service_send_code import BetaSessionServiceSendCode
from zitadel_client.models.beta_session_service_user_id_query import BetaSessionServiceUserIDQuery
from typing import Optional, Set
from typing_extensions import Self

class NoOp200Response2(BaseModel):
    """
    NoOp200Response2
    """ # noqa: E501
    aa25c8df_a5a6_419c_958a_f298abc26da0: Optional[BetaSessionServiceCreationDateQuery] = Field(default=None, alias="aa25c8df-a5a6-419c-958a-f298abc26da0")
    f694d573_7cfe_4814_bb7d_d878cce430eb: Optional[BetaSessionServiceIDsQuery] = Field(default=None, alias="f694d573-7cfe-4814-bb7d-d878cce430eb")
    var_84c3153b_64de_4fb0_b6cd_ec63b9eecfc2: Optional[Dict[str, Any]] = Field(default=None, alias="84c3153b-64de-4fb0-b6cd-ec63b9eecfc2")
    var_2a0ded0d_ebea_4787_9c27_8b463f8a4b70: Optional[BetaSessionServiceSendCode] = Field(default=None, alias="2a0ded0d-ebea-4787-9c27-8b463f8a4b70")
    var_2182f02e_7bbb_45a1_8360_ed91f8375e41: Optional[BetaSessionServiceUserIDQuery] = Field(default=None, alias="2182f02e-7bbb-45a1-8360-ed91f8375e41")
    __properties: ClassVar[List[str]] = ["aa25c8df-a5a6-419c-958a-f298abc26da0", "f694d573-7cfe-4814-bb7d-d878cce430eb", "84c3153b-64de-4fb0-b6cd-ec63b9eecfc2", "2a0ded0d-ebea-4787-9c27-8b463f8a4b70", "2182f02e-7bbb-45a1-8360-ed91f8375e41"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NoOp200Response2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aa25c8df_a5a6_419c_958a_f298abc26da0
        if self.aa25c8df_a5a6_419c_958a_f298abc26da0:
            _dict['aa25c8df-a5a6-419c-958a-f298abc26da0'] = self.aa25c8df_a5a6_419c_958a_f298abc26da0.to_dict()
        # override the default output from pydantic by calling `to_dict()` of f694d573_7cfe_4814_bb7d_d878cce430eb
        if self.f694d573_7cfe_4814_bb7d_d878cce430eb:
            _dict['f694d573-7cfe-4814-bb7d-d878cce430eb'] = self.f694d573_7cfe_4814_bb7d_d878cce430eb.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_2a0ded0d_ebea_4787_9c27_8b463f8a4b70
        if self.var_2a0ded0d_ebea_4787_9c27_8b463f8a4b70:
            _dict['2a0ded0d-ebea-4787-9c27-8b463f8a4b70'] = self.var_2a0ded0d_ebea_4787_9c27_8b463f8a4b70.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_2182f02e_7bbb_45a1_8360_ed91f8375e41
        if self.var_2182f02e_7bbb_45a1_8360_ed91f8375e41:
            _dict['2182f02e-7bbb-45a1-8360-ed91f8375e41'] = self.var_2182f02e_7bbb_45a1_8360_ed91f8375e41.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NoOp200Response2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aa25c8df-a5a6-419c-958a-f298abc26da0": BetaSessionServiceCreationDateQuery.from_dict(obj["aa25c8df-a5a6-419c-958a-f298abc26da0"]) if obj.get("aa25c8df-a5a6-419c-958a-f298abc26da0") is not None else None,
            "f694d573-7cfe-4814-bb7d-d878cce430eb": BetaSessionServiceIDsQuery.from_dict(obj["f694d573-7cfe-4814-bb7d-d878cce430eb"]) if obj.get("f694d573-7cfe-4814-bb7d-d878cce430eb") is not None else None,
            "84c3153b-64de-4fb0-b6cd-ec63b9eecfc2": obj.get("84c3153b-64de-4fb0-b6cd-ec63b9eecfc2"),
            "2a0ded0d-ebea-4787-9c27-8b463f8a4b70": BetaSessionServiceSendCode.from_dict(obj["2a0ded0d-ebea-4787-9c27-8b463f8a4b70"]) if obj.get("2a0ded0d-ebea-4787-9c27-8b463f8a4b70") is not None else None,
            "2182f02e-7bbb-45a1-8360-ed91f8375e41": BetaSessionServiceUserIDQuery.from_dict(obj["2182f02e-7bbb-45a1-8360-ed91f8375e41"]) if obj.get("2182f02e-7bbb-45a1-8360-ed91f8375e41") is not None else None
        })
        return _obj


