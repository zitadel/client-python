# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from zitadel_client.models.v2_display_name_query import V2DisplayNameQuery
from zitadel_client.models.v2_email_query import V2EmailQuery
from zitadel_client.models.v2_first_name_query import V2FirstNameQuery
from zitadel_client.models.v2_in_user_emails_query import V2InUserEmailsQuery
from zitadel_client.models.v2_in_user_id_query import V2InUserIDQuery
from zitadel_client.models.v2_last_name_query import V2LastNameQuery
from zitadel_client.models.v2_login_name_query import V2LoginNameQuery
from zitadel_client.models.v2_nick_name_query import V2NickNameQuery
from zitadel_client.models.v2_organization_id_query import V2OrganizationIDQuery
from zitadel_client.models.v2_phone_query import V2PhoneQuery
from zitadel_client.models.v2_state_query import V2StateQuery
from zitadel_client.models.v2_type_query import V2TypeQuery
from zitadel_client.models.v2_user_name_query import V2UserNameQuery
from typing import Optional, Set
from typing_extensions import Self

class V2SearchQuery1(BaseModel):
    """
    V2SearchQuery1
    """ # noqa: E501
    user_name_query: Optional[V2UserNameQuery] = Field(default=None, alias="userNameQuery")
    first_name_query: Optional[V2FirstNameQuery] = Field(default=None, alias="firstNameQuery")
    last_name_query: Optional[V2LastNameQuery] = Field(default=None, alias="lastNameQuery")
    nick_name_query: Optional[V2NickNameQuery] = Field(default=None, alias="nickNameQuery")
    display_name_query: Optional[V2DisplayNameQuery] = Field(default=None, alias="displayNameQuery")
    email_query: Optional[V2EmailQuery] = Field(default=None, alias="emailQuery")
    state_query: Optional[V2StateQuery] = Field(default=None, alias="stateQuery")
    type_query: Optional[V2TypeQuery] = Field(default=None, alias="typeQuery")
    login_name_query: Optional[V2LoginNameQuery] = Field(default=None, alias="loginNameQuery")
    in_user_ids_query: Optional[V2InUserIDQuery] = Field(default=None, alias="inUserIdsQuery")
    or_query: Optional[V2OrQuery] = Field(default=None, alias="orQuery")
    and_query: Optional[V2AndQuery] = Field(default=None, alias="andQuery")
    not_query: Optional[V2NotQuery] = Field(default=None, alias="notQuery")
    in_user_emails_query: Optional[V2InUserEmailsQuery] = Field(default=None, alias="inUserEmailsQuery")
    organization_id_query: Optional[V2OrganizationIDQuery] = Field(default=None, alias="organizationIdQuery")
    phone_query: Optional[V2PhoneQuery] = Field(default=None, alias="phoneQuery")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["userNameQuery", "firstNameQuery", "lastNameQuery", "nickNameQuery", "displayNameQuery", "emailQuery", "stateQuery", "typeQuery", "loginNameQuery", "inUserIdsQuery", "orQuery", "andQuery", "notQuery", "inUserEmailsQuery", "organizationIdQuery", "phoneQuery"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2SearchQuery1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user_name_query
        if self.user_name_query:
            _dict['userNameQuery'] = self.user_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_name_query
        if self.first_name_query:
            _dict['firstNameQuery'] = self.first_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_name_query
        if self.last_name_query:
            _dict['lastNameQuery'] = self.last_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nick_name_query
        if self.nick_name_query:
            _dict['nickNameQuery'] = self.nick_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of display_name_query
        if self.display_name_query:
            _dict['displayNameQuery'] = self.display_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email_query
        if self.email_query:
            _dict['emailQuery'] = self.email_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of state_query
        if self.state_query:
            _dict['stateQuery'] = self.state_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of type_query
        if self.type_query:
            _dict['typeQuery'] = self.type_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of login_name_query
        if self.login_name_query:
            _dict['loginNameQuery'] = self.login_name_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_user_ids_query
        if self.in_user_ids_query:
            _dict['inUserIdsQuery'] = self.in_user_ids_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of or_query
        if self.or_query:
            _dict['orQuery'] = self.or_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of and_query
        if self.and_query:
            _dict['andQuery'] = self.and_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_query
        if self.not_query:
            _dict['notQuery'] = self.not_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_user_emails_query
        if self.in_user_emails_query:
            _dict['inUserEmailsQuery'] = self.in_user_emails_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of organization_id_query
        if self.organization_id_query:
            _dict['organizationIdQuery'] = self.organization_id_query.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone_query
        if self.phone_query:
            _dict['phoneQuery'] = self.phone_query.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2SearchQuery1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userNameQuery": V2UserNameQuery.from_dict(obj["userNameQuery"]) if obj.get("userNameQuery") is not None else None,
            "firstNameQuery": V2FirstNameQuery.from_dict(obj["firstNameQuery"]) if obj.get("firstNameQuery") is not None else None,
            "lastNameQuery": V2LastNameQuery.from_dict(obj["lastNameQuery"]) if obj.get("lastNameQuery") is not None else None,
            "nickNameQuery": V2NickNameQuery.from_dict(obj["nickNameQuery"]) if obj.get("nickNameQuery") is not None else None,
            "displayNameQuery": V2DisplayNameQuery.from_dict(obj["displayNameQuery"]) if obj.get("displayNameQuery") is not None else None,
            "emailQuery": V2EmailQuery.from_dict(obj["emailQuery"]) if obj.get("emailQuery") is not None else None,
            "stateQuery": V2StateQuery.from_dict(obj["stateQuery"]) if obj.get("stateQuery") is not None else None,
            "typeQuery": V2TypeQuery.from_dict(obj["typeQuery"]) if obj.get("typeQuery") is not None else None,
            "loginNameQuery": V2LoginNameQuery.from_dict(obj["loginNameQuery"]) if obj.get("loginNameQuery") is not None else None,
            "inUserIdsQuery": V2InUserIDQuery.from_dict(obj["inUserIdsQuery"]) if obj.get("inUserIdsQuery") is not None else None,
            "orQuery": V2OrQuery.from_dict(obj["orQuery"]) if obj.get("orQuery") is not None else None,
            "andQuery": V2AndQuery.from_dict(obj["andQuery"]) if obj.get("andQuery") is not None else None,
            "notQuery": V2NotQuery.from_dict(obj["notQuery"]) if obj.get("notQuery") is not None else None,
            "inUserEmailsQuery": V2InUserEmailsQuery.from_dict(obj["inUserEmailsQuery"]) if obj.get("inUserEmailsQuery") is not None else None,
            "organizationIdQuery": V2OrganizationIDQuery.from_dict(obj["organizationIdQuery"]) if obj.get("organizationIdQuery") is not None else None,
            "phoneQuery": V2PhoneQuery.from_dict(obj["phoneQuery"]) if obj.get("phoneQuery") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj

from zitadel_client.models.v2_and_query import V2AndQuery
from zitadel_client.models.v2_not_query import V2NotQuery
from zitadel_client.models.v2_or_query import V2OrQuery
# TODO: Rewrite to not use raise_errors
V2SearchQuery1.model_rebuild(raise_errors=False)

