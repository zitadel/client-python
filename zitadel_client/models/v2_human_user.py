# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing_extensions import Self

from zitadel_client.models.v2_human_email import V2HumanEmail
from zitadel_client.models.v2_human_phone import V2HumanPhone
from zitadel_client.models.v2_human_profile import V2HumanProfile
from zitadel_client.models.v2_user_state import V2UserState


class V2HumanUser(BaseModel):
    """
    V2HumanUser
    """ # noqa: E501
    user_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the user.", alias="userId")
    state: Optional[V2UserState] = V2UserState.USER_STATE_UNSPECIFIED
    username: Optional[StrictStr] = Field(default=None, description="Username of the user, which can be globally unique or unique on organization level.")
    login_names: Optional[List[StrictStr]] = Field(default=None, description="Possible usable login names for the user.", alias="loginNames")
    preferred_login_name: Optional[StrictStr] = Field(default=None, description="Preferred login name of the user.", alias="preferredLoginName")
    profile: Optional[V2HumanProfile] = None
    email: Optional[V2HumanEmail] = None
    phone: Optional[V2HumanPhone] = None
    password_change_required: Optional[StrictBool] = Field(default=None, description="User is required to change the used password on the next login.", alias="passwordChangeRequired")
    password_changed: Optional[datetime] = Field(default=None, description="The time the user last changed their password.", alias="passwordChanged")
    mfa_init_skipped: Optional[datetime] = Field(default=None, description="The time the user last skipped MFA initialization.", alias="mfaInitSkipped")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["userId", "state", "username", "loginNames", "preferredLoginName", "profile", "email", "phone", "passwordChangeRequired", "passwordChanged", "mfaInitSkipped"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2HumanUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of profile
        if self.profile:
            _dict["profile"] = self.profile.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict["email"] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of phone
        if self.phone:
            _dict["phone"] = self.phone.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2HumanUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "state": obj.get("state") if obj.get("state") is not None else V2UserState.USER_STATE_UNSPECIFIED,
            "username": obj.get("username"),
            "loginNames": obj.get("loginNames"),
            "preferredLoginName": obj.get("preferredLoginName"),
            "profile": V2HumanProfile.from_dict(obj["profile"]) if obj.get("profile") is not None else None,
            "email": V2HumanEmail.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "phone": V2HumanPhone.from_dict(obj["phone"]) if obj.get("phone") is not None else None,
            "passwordChangeRequired": obj.get("passwordChangeRequired"),
            "passwordChanged": obj.get("passwordChanged"),
            "mfaInitSkipped": obj.get("mfaInitSkipped")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


