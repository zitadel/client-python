# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from zitadel_client.models.v2_idpldap_access_information import V2IDPLDAPAccessInformation
from zitadel_client.models.v2_idpo_auth_access_information import V2IDPOAuthAccessInformation
from zitadel_client.models.v2_idpsaml_access_information import V2IDPSAMLAccessInformation
from typing import Optional, Set
from typing_extensions import Self

class V2IDPInformation(BaseModel):
    """
    V2IDPInformation
    """ # noqa: E501
    oauth: Optional[V2IDPOAuthAccessInformation] = None
    ldap: Optional[V2IDPLDAPAccessInformation] = None
    saml: Optional[V2IDPSAMLAccessInformation] = None
    idp_id: Optional[StrictStr] = Field(default=None, description="ID of the identity provider", alias="idpId")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user of the identity provider", alias="userId")
    user_name: Optional[StrictStr] = Field(default=None, description="username of the user of the identity provider", alias="userName")
    raw_information: Optional[Dict[str, Any]] = Field(default=None, description="complete information returned by the identity provider", alias="rawInformation")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["oauth", "ldap", "saml", "idpId", "userId", "userName", "rawInformation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2IDPInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of oauth
        if self.oauth:
            _dict['oauth'] = self.oauth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap
        if self.ldap:
            _dict['ldap'] = self.ldap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml
        if self.saml:
            _dict['saml'] = self.saml.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2IDPInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "oauth": V2IDPOAuthAccessInformation.from_dict(obj["oauth"]) if obj.get("oauth") is not None else None,
            "ldap": V2IDPLDAPAccessInformation.from_dict(obj["ldap"]) if obj.get("ldap") is not None else None,
            "saml": V2IDPSAMLAccessInformation.from_dict(obj["saml"]) if obj.get("saml") is not None else None,
            "idpId": obj.get("idpId"),
            "userId": obj.get("userId"),
            "userName": obj.get("userName"),
            "rawInformation": obj.get("rawInformation")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


