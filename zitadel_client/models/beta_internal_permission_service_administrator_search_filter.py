# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.change_date import ChangeDate
from zitadel_client.models.creation_date import CreationDate
from zitadel_client.models.in_user_ids_filter import InUserIdsFilter
from zitadel_client.models.resource import Resource
from zitadel_client.models.role import Role
from zitadel_client.models.user_display_name import UserDisplayName
from zitadel_client.models.user_organization_id import UserOrganizationId
from zitadel_client.models.user_preferred_login_name import UserPreferredLoginName
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
BETAINTERNALPERMISSIONSERVICEADMINISTRATORSEARCHFILTER_ONE_OF_SCHEMAS = ["ChangeDate", "CreationDate", "InUserIdsFilter", "ModelAnd", "ModelNot", "ModelOr", "Resource", "Role", "UserDisplayName", "UserOrganizationId", "UserPreferredLoginName"]

class BetaInternalPermissionServiceAdministratorSearchFilter(BaseModel):
    """
    BetaInternalPermissionServiceAdministratorSearchFilter
    """
    # data type: ModelAnd
    oneof_schema_1_validator: Optional[ModelAnd] = None
    # data type: ChangeDate
    oneof_schema_2_validator: Optional[ChangeDate] = None
    # data type: CreationDate
    oneof_schema_3_validator: Optional[CreationDate] = None
    # data type: InUserIdsFilter
    oneof_schema_4_validator: Optional[InUserIdsFilter] = None
    # data type: ModelNot
    oneof_schema_5_validator: Optional[ModelNot] = None
    # data type: ModelOr
    oneof_schema_6_validator: Optional[ModelOr] = None
    # data type: Resource
    oneof_schema_7_validator: Optional[Resource] = None
    # data type: Role
    oneof_schema_8_validator: Optional[Role] = None
    # data type: UserDisplayName
    oneof_schema_9_validator: Optional[UserDisplayName] = None
    # data type: UserOrganizationId
    oneof_schema_10_validator: Optional[UserOrganizationId] = None
    # data type: UserPreferredLoginName
    oneof_schema_11_validator: Optional[UserPreferredLoginName] = None
    actual_instance: Optional[Union[ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName]] = None
    one_of_schemas: Set[str] = { "ChangeDate", "CreationDate", "InUserIdsFilter", "ModelAnd", "ModelNot", "ModelOr", "Resource", "Role", "UserDisplayName", "UserOrganizationId", "UserPreferredLoginName" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaInternalPermissionServiceAdministratorSearchFilter.model_construct()
        error_messages = []
        match = 0
        # validate data type: ModelAnd
        if not isinstance(v, ModelAnd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelAnd`")
        else:
            match += 1
        # validate data type: ChangeDate
        if not isinstance(v, ChangeDate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChangeDate`")
        else:
            match += 1
        # validate data type: CreationDate
        if not isinstance(v, CreationDate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreationDate`")
        else:
            match += 1
        # validate data type: InUserIdsFilter
        if not isinstance(v, InUserIdsFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `InUserIdsFilter`")
        else:
            match += 1
        # validate data type: ModelNot
        if not isinstance(v, ModelNot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelNot`")
        else:
            match += 1
        # validate data type: ModelOr
        if not isinstance(v, ModelOr):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ModelOr`")
        else:
            match += 1
        # validate data type: Resource
        if not isinstance(v, Resource):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Resource`")
        else:
            match += 1
        # validate data type: Role
        if not isinstance(v, Role):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Role`")
        else:
            match += 1
        # validate data type: UserDisplayName
        if not isinstance(v, UserDisplayName):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserDisplayName`")
        else:
            match += 1
        # validate data type: UserOrganizationId
        if not isinstance(v, UserOrganizationId):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserOrganizationId`")
        else:
            match += 1
        # validate data type: UserPreferredLoginName
        if not isinstance(v, UserPreferredLoginName):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UserPreferredLoginName`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaInternalPermissionServiceAdministratorSearchFilter with oneOf schemas: ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaInternalPermissionServiceAdministratorSearchFilter with oneOf schemas: ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ModelAnd
        try:
            instance.actual_instance = ModelAnd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChangeDate
        try:
            instance.actual_instance = ChangeDate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreationDate
        try:
            instance.actual_instance = CreationDate.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into InUserIdsFilter
        try:
            instance.actual_instance = InUserIdsFilter.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelNot
        try:
            instance.actual_instance = ModelNot.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ModelOr
        try:
            instance.actual_instance = ModelOr.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Resource
        try:
            instance.actual_instance = Resource.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Role
        try:
            instance.actual_instance = Role.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserDisplayName
        try:
            instance.actual_instance = UserDisplayName.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserOrganizationId
        try:
            instance.actual_instance = UserOrganizationId.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UserPreferredLoginName
        try:
            instance.actual_instance = UserPreferredLoginName.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaInternalPermissionServiceAdministratorSearchFilter with oneOf schemas: ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaInternalPermissionServiceAdministratorSearchFilter with oneOf schemas: ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ChangeDate, CreationDate, InUserIdsFilter, ModelAnd, ModelNot, ModelOr, Resource, Role, UserDisplayName, UserOrganizationId, UserPreferredLoginName]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())

from zitadel_client.models.model_and import ModelAnd
from zitadel_client.models.model_not import ModelNot
from zitadel_client.models.model_or import ModelOr
# TODO: Rewrite to not use raise_errors
BetaInternalPermissionServiceAdministratorSearchFilter.model_rebuild(raise_errors=False)

