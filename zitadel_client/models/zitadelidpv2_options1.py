# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from zitadel_client.models.v2_auto_linking_option import V2AutoLinkingOption
from typing import Optional, Set
from typing_extensions import Self

class Zitadelidpv2Options1(BaseModel):
    """
    Zitadelidpv2Options1
    """ # noqa: E501
    is_linking_allowed: Optional[StrictBool] = Field(default=None, description="Enable if users should be able to link an existing ZITADEL user with an external account.", alias="isLinkingAllowed")
    is_creation_allowed: Optional[StrictBool] = Field(default=None, description="Enable if users should be able to create a new account in ZITADEL when using an external account.", alias="isCreationAllowed")
    is_auto_creation: Optional[StrictBool] = Field(default=None, description="Enable if a new account in ZITADEL should be created automatically when login with an external account.", alias="isAutoCreation")
    is_auto_update: Optional[StrictBool] = Field(default=None, description="Enable if a the ZITADEL account fields should be updated automatically on each login.", alias="isAutoUpdate")
    auto_linking: Optional[V2AutoLinkingOption] = Field(default=V2AutoLinkingOption.AUTO_LINKING_OPTION_UNSPECIFIED, alias="autoLinking")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["isLinkingAllowed", "isCreationAllowed", "isAutoCreation", "isAutoUpdate", "autoLinking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Zitadelidpv2Options1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Zitadelidpv2Options1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isLinkingAllowed": obj.get("isLinkingAllowed"),
            "isCreationAllowed": obj.get("isCreationAllowed"),
            "isAutoCreation": obj.get("isAutoCreation"),
            "isAutoUpdate": obj.get("isAutoUpdate"),
            "autoLinking": obj.get("autoLinking") if obj.get("autoLinking") is not None else V2AutoLinkingOption.AUTO_LINKING_OPTION_UNSPECIFIED
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


