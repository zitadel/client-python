# coding: utf-8

"""
    Zitadel SDK

    The Zitadel SDK is a convenience wrapper around the Zitadel APIs to assist you in integrating with your Zitadel environment. This SDK enables you to handle resources, settings, and configurations within the Zitadel platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from zitadel_client.models.domain_query2 import DomainQuery2
from zitadel_client.models.generated_query import GeneratedQuery
from zitadel_client.models.primary_query import PrimaryQuery
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

none_type = type(None)
BETAINSTANCESERVICEDOMAINSEARCHQUERY_ONE_OF_SCHEMAS = ["DomainQuery2", "GeneratedQuery", "PrimaryQuery"]

class BetaInstanceServiceDomainSearchQuery(BaseModel):
    """
    BetaInstanceServiceDomainSearchQuery
    """
    # data type: DomainQuery2
    oneof_schema_1_validator: Optional[DomainQuery2] = None
    # data type: GeneratedQuery
    oneof_schema_2_validator: Optional[GeneratedQuery] = None
    # data type: PrimaryQuery
    oneof_schema_3_validator: Optional[PrimaryQuery] = None
    actual_instance: Optional[Union[DomainQuery2, GeneratedQuery, PrimaryQuery]] = None
    one_of_schemas: Set[str] = { "DomainQuery2", "GeneratedQuery", "PrimaryQuery" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BetaInstanceServiceDomainSearchQuery.model_construct()
        error_messages = []
        match = 0
        # validate data type: DomainQuery2
        if not isinstance(v, DomainQuery2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DomainQuery2`")
        else:
            match += 1
        # validate data type: GeneratedQuery
        if not isinstance(v, GeneratedQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GeneratedQuery`")
        else:
            match += 1
        # validate data type: PrimaryQuery
        if not isinstance(v, PrimaryQuery):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PrimaryQuery`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BetaInstanceServiceDomainSearchQuery with oneOf schemas: DomainQuery2, GeneratedQuery, PrimaryQuery. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BetaInstanceServiceDomainSearchQuery with oneOf schemas: DomainQuery2, GeneratedQuery, PrimaryQuery. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into DomainQuery2
        try:
            instance.actual_instance = DomainQuery2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GeneratedQuery
        try:
            instance.actual_instance = GeneratedQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PrimaryQuery
        try:
            instance.actual_instance = PrimaryQuery.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BetaInstanceServiceDomainSearchQuery with oneOf schemas: DomainQuery2, GeneratedQuery, PrimaryQuery. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BetaInstanceServiceDomainSearchQuery with oneOf schemas: DomainQuery2, GeneratedQuery, PrimaryQuery. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], DomainQuery2, GeneratedQuery, PrimaryQuery]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


