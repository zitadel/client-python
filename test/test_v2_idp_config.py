# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_idp_config import V2IDPConfig

class TestV2IDPConfig(unittest.TestCase):
    """V2IDPConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2IDPConfig:
        """Test V2IDPConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2IDPConfig`
        """
        model = V2IDPConfig()
        if include_optional:
            return V2IDPConfig(
                options = zitadel_client.models.zitadelidpv2_options.zitadelidpv2Options(
                    is_linking_allowed = True, 
                    is_creation_allowed = True, 
                    is_auto_creation = True, 
                    is_auto_update = True, 
                    auto_linking = 'AUTO_LINKING_OPTION_UNSPECIFIED', ),
                ldap = zitadel_client.models.v2_ldap_config.v2LDAPConfig(
                    servers = [
                        ''
                        ], 
                    start_tls = True, 
                    base_dn = '', 
                    bind_dn = '', 
                    user_base = '', 
                    user_object_classes = [
                        ''
                        ], 
                    user_filters = [
                        ''
                        ], 
                    timeout = '', 
                    attributes = zitadel_client.models.v2_ldap_attributes.v2LDAPAttributes(
                        id_attribute = '', 
                        first_name_attribute = '', 
                        last_name_attribute = '', 
                        display_name_attribute = '', 
                        nick_name_attribute = '', 
                        preferred_username_attribute = '', 
                        email_attribute = '', 
                        email_verified_attribute = '', 
                        phone_attribute = '', 
                        phone_verified_attribute = '', 
                        preferred_language_attribute = '', 
                        avatar_url_attribute = '', 
                        profile_attribute = '', ), ),
                google = zitadel_client.models.v2_google_config.v2GoogleConfig(
                    client_id = 'client-id', 
                    scopes = ["openid","profile","email"], ),
                oauth = zitadel_client.models.v2_o_auth_config.v2OAuthConfig(
                    client_id = 'client-id', 
                    authorization_endpoint = 'https://accounts.google.com/o/oauth2/v2/auth', 
                    token_endpoint = 'https://oauth2.googleapis.com/token', 
                    user_endpoint = 'https://openidconnect.googleapis.com/v1/userinfo', 
                    scopes = ["openid","profile","email"], 
                    id_attribute = 'user_id', ),
                oidc = zitadel_client.models.v2_generic_oidc_config.v2GenericOIDCConfig(
                    issuer = 'https://accounts.google.com/', 
                    client_id = 'client-id', 
                    scopes = ["openid","profile","email"], 
                    is_id_token_mapping = True, ),
                jwt = zitadel_client.models.v2_jwt_config.v2JWTConfig(
                    jwt_endpoint = 'https://accounts.google.com', 
                    issuer = 'https://accounts.google.com', 
                    keys_endpoint = 'https://accounts.google.com/keys', 
                    header_name = 'x-auth-token', ),
                github = zitadel_client.models.v2_git_hub_config.v2GitHubConfig(
                    client_id = 'client-id', 
                    scopes = ["openid","profile","email"], ),
                github_es = zitadel_client.models.v2_git_hub_enterprise_server_config.v2GitHubEnterpriseServerConfig(
                    client_id = 'client-id', 
                    authorization_endpoint = '', 
                    token_endpoint = '', 
                    user_endpoint = '', 
                    scopes = ["openid","profile","email"], ),
                gitlab = zitadel_client.models.v2_git_lab_config.v2GitLabConfig(
                    client_id = 'client-id', 
                    scopes = ["openid","profile","email"], ),
                gitlab_self_hosted = zitadel_client.models.v2_git_lab_self_hosted_config.v2GitLabSelfHostedConfig(
                    issuer = '', 
                    client_id = 'client-id', 
                    scopes = ["openid","profile","email"], ),
                azure_ad = zitadel_client.models.v2_azure_ad_config.v2AzureADConfig(
                    client_id = 'client-id', 
                    tenant = zitadel_client.models.v2_azure_ad_tenant.v2AzureADTenant(
                        tenant_type = 'AZURE_AD_TENANT_TYPE_COMMON', 
                        tenant_id = '', ), 
                    email_verified = True, 
                    scopes = ["openid","profile","email","User.Read"], ),
                apple = zitadel_client.models.v2_apple_config.v2AppleConfig(
                    client_id = 'com.client.id', 
                    team_id = 'ALT03JV3OS', 
                    key_id = 'OGKDK25KD', 
                    scopes = ["name","email"], ),
                saml = zitadel_client.models.v2_saml_config.v2SAMLConfig(
                    metadata_xml = 'YQ==', 
                    binding = 'SAML_BINDING_UNSPECIFIED', 
                    with_signed_request = True, 
                    name_id_format = 'SAML_NAME_ID_FORMAT_UNSPECIFIED', 
                    transient_mapping_attribute_name = '', )
            )
        else:
            return V2IDPConfig(
        )
        """

    def testV2IDPConfig(self):
        """Test V2IDPConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
