# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_factors import V2Factors

class TestV2Factors(unittest.TestCase):
    """V2Factors unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2Factors:
        """Test V2Factors
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2Factors`
        """
        model = V2Factors()
        if include_optional:
            return V2Factors(
                user = zitadel_client.models.v2_user_factor.v2UserFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    id = '', 
                    login_name = '', 
                    display_name = '', 
                    organization_id = '', ),
                password = zitadel_client.models.v2_password_factor.v2PasswordFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                web_auth_n = zitadel_client.models.v2_web_auth_n_factor.v2WebAuthNFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    user_verified = True, ),
                intent = zitadel_client.models.v2_intent_factor.v2IntentFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                totp = zitadel_client.models.v2_totp_factor.v2TOTPFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                otp_sms = zitadel_client.models.v2_otp_factor.v2OTPFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                otp_email = zitadel_client.models.v2_otp_factor.v2OTPFactor(
                    verified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
            )
        else:
            return V2Factors(
        )
        """

    def testV2Factors(self):
        """Test V2Factors"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
