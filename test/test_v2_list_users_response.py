# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_list_users_response import V2ListUsersResponse

class TestV2ListUsersResponse(unittest.TestCase):
    """V2ListUsersResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2ListUsersResponse:
        """Test V2ListUsersResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2ListUsersResponse`
        """
        model = V2ListUsersResponse()
        if include_optional:
            return V2ListUsersResponse(
                details = zitadel_client.models.v2_list_details.v2ListDetails(
                    total_result = '2', 
                    processed_sequence = '267831', 
                    timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ),
                sorting_column = 'USER_FIELD_NAME_UNSPECIFIED',
                result = [
                    zitadel_client.models.v2_user.v2User(
                        user_id = 'd654e6ba-70a3-48ef-a95d-37c8d8a7901a', 
                        details = zitadel_client.models.v2_details.v2Details(
                            sequence = '2', 
                            change_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            resource_owner = '69629023906488334', ), 
                        state = 'USER_STATE_UNSPECIFIED', 
                        username = 'minnie-mouse', 
                        login_names = ["gigi@zitadel.com","gigi@zitadel.zitadel.ch"], 
                        preferred_login_name = 'gigi@zitadel.com', 
                        human = zitadel_client.models.v2_human_user.v2HumanUser(
                            user_id = 'd654e6ba-70a3-48ef-a95d-37c8d8a7901a', 
                            username = 'minnie-mouse', 
                            login_names = ["gigi@zitadel.com","gigi@zitadel.zitadel.ch"], 
                            preferred_login_name = 'gigi@zitadel.com', 
                            profile = zitadel_client.models.v2_human_profile.v2HumanProfile(
                                given_name = 'Minnie', 
                                family_name = 'Mouse', 
                                nick_name = 'Mini', 
                                display_name = 'Minnie Mouse', 
                                preferred_language = 'en', 
                                gender = 'GENDER_UNSPECIFIED', 
                                avatar_url = 'https://api.zitadel.ch/assets/v1/avatar-32432jkh4kj32', ), 
                            email = zitadel_client.models.v2_human_email.v2HumanEmail(
                                is_verified = True, ), 
                            phone = zitadel_client.models.v2_human_phone.v2HumanPhone(
                                is_verified = True, ), 
                            password_change_required = True, 
                            password_changed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            mfa_init_skipped = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        machine = zitadel_client.models.v2_machine_user.v2MachineUser(
                            name = 'zitadel', 
                            description = 'The one and only IAM', 
                            has_secret = True, 
                            access_token_type = 'ACCESS_TOKEN_TYPE_BEARER', ), )
                    ]
            )
        else:
            return V2ListUsersResponse(
        )
        """

    def testV2ListUsersResponse(self):
        """Test V2ListUsersResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
