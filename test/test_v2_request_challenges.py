# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_request_challenges import V2RequestChallenges

class TestV2RequestChallenges(unittest.TestCase):
    """V2RequestChallenges unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2RequestChallenges:
        """Test V2RequestChallenges
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2RequestChallenges`
        """
        model = V2RequestChallenges()
        if include_optional:
            return V2RequestChallenges(
                web_auth_n = zitadel_client.models.v2_request_challenges_web_auth_n.v2RequestChallengesWebAuthN(
                    domain = '', 
                    user_verification_requirement = 'USER_VERIFICATION_REQUIREMENT_UNSPECIFIED', ),
                otp_sms = zitadel_client.models.request_challenges_otpsms.RequestChallengesOTPSMS(
                    return_code = True, ),
                otp_email = zitadel_client.models.request_challenges_otp_email.RequestChallengesOTPEmail(
                    send_code = zitadel_client.models.otp_email_send_code.OTPEmailSendCode(
                        url_template = 'https://example.com/otp/verify?userID={{.UserID}}&code={{.Code}}', ), 
                    return_code = zitadel_client.models.otp_email_return_code.OTPEmailReturnCode(), )
            )
        else:
            return V2RequestChallenges(
        )
        """

    def testV2RequestChallenges(self):
        """Test V2RequestChallenges"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
