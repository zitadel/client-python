# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_create_session_request import V2CreateSessionRequest

class TestV2CreateSessionRequest(unittest.TestCase):
    """V2CreateSessionRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2CreateSessionRequest:
        """Test V2CreateSessionRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2CreateSessionRequest`
        """
        model = V2CreateSessionRequest()
        if include_optional:
            return V2CreateSessionRequest(
                checks = zitadel_client.models.v2_checks.v2Checks(
                    user = zitadel_client.models.v2_check_user.v2CheckUser(
                        user_id = 'd654e6ba-70a3-48ef-a95d-37c8d8a7901a', 
                        login_name = 'mini@mouse.com', ), 
                    password = zitadel_client.models.v2_check_password.v2CheckPassword(), 
                    web_auth_n = zitadel_client.models.v2_check_web_auth_n.v2CheckWebAuthN(
                        credential_assertion_data = zitadel_client.models.credential_assertion_data.credentialAssertionData(), ), 
                    idp_intent = zitadel_client.models.v2_check_idp_intent.v2CheckIDPIntent(
                        idp_intent_id = 'd654e6ba-70a3-48ef-a95d-37c8d8a7901a', 
                        idp_intent_token = 'SJKL3ioIDpo342ioqw98fjp3sdf32wahb=', ), 
                    totp = zitadel_client.models.v2_check_totp.v2CheckTOTP(
                        code = '323764', ), 
                    otp_sms = zitadel_client.models.v2_check_otp.v2CheckOTP(
                        code = '3237642', ), 
                    otp_email = zitadel_client.models.v2_check_otp.v2CheckOTP(
                        code = '3237642', ), ),
                metadata = {
                    'key' : 'YQ=='
                    },
                challenges = zitadel_client.models.v2_request_challenges.v2RequestChallenges(
                    web_auth_n = zitadel_client.models.v2_request_challenges_web_auth_n.v2RequestChallengesWebAuthN(
                        domain = '', 
                        user_verification_requirement = 'USER_VERIFICATION_REQUIREMENT_UNSPECIFIED', ), 
                    otp_sms = zitadel_client.models.request_challenges_otpsms.RequestChallengesOTPSMS(
                        return_code = True, ), 
                    otp_email = zitadel_client.models.request_challenges_otp_email.RequestChallengesOTPEmail(
                        send_code = zitadel_client.models.otp_email_send_code.OTPEmailSendCode(
                            url_template = 'https://example.com/otp/verify?userID={{.UserID}}&code={{.Code}}', ), 
                        return_code = zitadel_client.models.otp_email_return_code.OTPEmailReturnCode(), ), ),
                user_agent = zitadel_client.models.v2_user_agent.v2UserAgent(
                    fingerprint_id = '', 
                    ip = '', 
                    description = '', 
                    header = {
                        'key' : zitadel_client.models.user_agent_header_values.UserAgentHeaderValues(
                            values = [
                                ''
                                ], )
                        }, ),
                lifetime = '18000s'
            )
        else:
            return V2CreateSessionRequest(
        )
        """

    def testV2CreateSessionRequest(self):
        """Test V2CreateSessionRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
