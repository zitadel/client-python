# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_not_query import V2NotQuery

class TestV2NotQuery(unittest.TestCase):
    """V2NotQuery unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2NotQuery:
        """Test V2NotQuery
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2NotQuery`
        """
        model = V2NotQuery()
        if include_optional:
            return V2NotQuery(
                query = zitadel_client.models.v2_search_query_1.v2SearchQuery_1(
                    user_name_query = zitadel_client.models.v2_user_name_query.v2UserNameQuery(
                        user_name = 'gigi-giraffe', 
                        method = 'TEXT_QUERY_METHOD_EQUALS', ), 
                    first_name_query = zitadel_client.models.v2_first_name_query.v2FirstNameQuery(
                        first_name = 'Gigi', ), 
                    last_name_query = zitadel_client.models.v2_last_name_query.v2LastNameQuery(
                        last_name = 'Giraffe', ), 
                    nick_name_query = zitadel_client.models.v2_nick_name_query.v2NickNameQuery(
                        nick_name = 'Gigi', ), 
                    display_name_query = zitadel_client.models.v2_display_name_query.v2DisplayNameQuery(
                        display_name = 'Gigi Giraffe', ), 
                    email_query = zitadel_client.models.v2_email_query.v2EmailQuery(
                        email_address = 'gigi@zitadel.com', ), 
                    state_query = zitadel_client.models.v2_state_query.v2StateQuery(
                        state = 'USER_STATE_UNSPECIFIED', ), 
                    type_query = zitadel_client.models.v2_type_query.v2TypeQuery(
                        type = 'TYPE_UNSPECIFIED', ), 
                    login_name_query = zitadel_client.models.v2_login_name_query.v2LoginNameQuery(
                        login_name = 'gigi@zitadel.cloud', ), 
                    in_user_ids_query = zitadel_client.models.v2_in_user_id_query.v2InUserIDQuery(
                        user_ids = ["69629023906488334","69622366012355662"], ), 
                    or_query = zitadel_client.models.v2_or_query.v2OrQuery(
                        queries = [
                            zitadel_client.models.v2_search_query_1.v2SearchQuery_1(
                                and_query = zitadel_client.models.v2_and_query.v2AndQuery(), 
                                not_query = zitadel_client.models.v2_not_query.v2NotQuery(), 
                                in_user_emails_query = zitadel_client.models.v2_in_user_emails_query.v2InUserEmailsQuery(
                                    user_emails = ["test@example.com","test@example.org"], ), 
                                organization_id_query = zitadel_client.models.v2_organization_id_query.v2OrganizationIDQuery(
                                    id = '69629023906488334', ), 
                                phone_query = zitadel_client.models.v2_phone_query.v2PhoneQuery(
                                    number = '+41791234567', ), )
                            ], ), 
                    and_query = zitadel_client.models.v2_and_query.v2AndQuery(), 
                    not_query = zitadel_client.models.v2_not_query.v2NotQuery(), 
                    in_user_emails_query = zitadel_client.models.v2_in_user_emails_query.v2InUserEmailsQuery(
                        user_emails = ["test@example.com","test@example.org"], ), 
                    organization_id_query = zitadel_client.models.v2_organization_id_query.v2OrganizationIDQuery(
                        id = '69629023906488334', ), 
                    phone_query = zitadel_client.models.v2_phone_query.v2PhoneQuery(
                        number = '+41791234567', ), )
            )
        else:
            return V2NotQuery(
        )
        """

    def testV2NotQuery(self):
        """Test V2NotQuery"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
