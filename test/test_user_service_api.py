# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.api.user_service_api import UserServiceApi


class TestUserServiceApi(unittest.TestCase):
    """UserServiceApi unit test stubs"""

    def setUp(self) -> None:
        self.api = UserServiceApi()

    def tearDown(self) -> None:
        pass

    def test_user_service_add_human_user(self) -> None:
        """Test case for user_service_add_human_user

        Create a new human user
        """
        pass

    def test_user_service_add_idp_link(self) -> None:
        """Test case for user_service_add_idp_link

        Add link to an identity provider to an user
        """
        pass

    def test_user_service_add_otp_email(self) -> None:
        """Test case for user_service_add_otp_email

        Add OTP Email for a user
        """
        pass

    def test_user_service_add_otpsms(self) -> None:
        """Test case for user_service_add_otpsms

        Add OTP SMS for a user
        """
        pass

    def test_user_service_create_invite_code(self) -> None:
        """Test case for user_service_create_invite_code

        Create an invite code for a user
        """
        pass

    def test_user_service_create_passkey_registration_link(self) -> None:
        """Test case for user_service_create_passkey_registration_link

        Create a passkey registration link for a user
        """
        pass

    def test_user_service_deactivate_user(self) -> None:
        """Test case for user_service_deactivate_user

        Deactivate user
        """
        pass

    def test_user_service_delete_user(self) -> None:
        """Test case for user_service_delete_user

        Delete user
        """
        pass

    def test_user_service_get_user_by_id(self) -> None:
        """Test case for user_service_get_user_by_id

        User by ID
        """
        pass

    def test_user_service_human_mfa_init_skipped(self) -> None:
        """Test case for user_service_human_mfa_init_skipped

        MFA Init Skipped
        """
        pass

    def test_user_service_list_authentication_factors(self) -> None:
        """Test case for user_service_list_authentication_factors

        """
        pass

    def test_user_service_list_authentication_method_types(self) -> None:
        """Test case for user_service_list_authentication_method_types

        List all possible authentication methods of a user
        """
        pass

    def test_user_service_list_idp_links(self) -> None:
        """Test case for user_service_list_idp_links

        List links to an identity provider of an user
        """
        pass

    def test_user_service_list_passkeys(self) -> None:
        """Test case for user_service_list_passkeys

        List passkeys of an user
        """
        pass

    def test_user_service_list_users(self) -> None:
        """Test case for user_service_list_users

        Search Users
        """
        pass

    def test_user_service_lock_user(self) -> None:
        """Test case for user_service_lock_user

        Lock user
        """
        pass

    def test_user_service_password_reset(self) -> None:
        """Test case for user_service_password_reset

        Request a code to reset a password
        """
        pass

    def test_user_service_reactivate_user(self) -> None:
        """Test case for user_service_reactivate_user

        Reactivate user
        """
        pass

    def test_user_service_register_passkey(self) -> None:
        """Test case for user_service_register_passkey

        Start the registration of passkey for a user
        """
        pass

    def test_user_service_register_totp(self) -> None:
        """Test case for user_service_register_totp

        Start the registration of a TOTP generator for a user
        """
        pass

    def test_user_service_register_u2_f(self) -> None:
        """Test case for user_service_register_u2_f

        Start the registration of a u2f token for a user
        """
        pass

    def test_user_service_remove_idp_link(self) -> None:
        """Test case for user_service_remove_idp_link

        Remove link of an identity provider to an user
        """
        pass

    def test_user_service_remove_otp_email(self) -> None:
        """Test case for user_service_remove_otp_email

        Remove One-Time Password (OTP) Email from a user
        """
        pass

    def test_user_service_remove_otpsms(self) -> None:
        """Test case for user_service_remove_otpsms

        Remove One-Time Password (OTP) SMS from a user
        """
        pass

    def test_user_service_remove_passkey(self) -> None:
        """Test case for user_service_remove_passkey

        Remove passkey from a user
        """
        pass

    def test_user_service_remove_phone(self) -> None:
        """Test case for user_service_remove_phone

        Delete the user phone
        """
        pass

    def test_user_service_remove_totp(self) -> None:
        """Test case for user_service_remove_totp

        Remove TOTP generator from a user
        """
        pass

    def test_user_service_remove_u2_f(self) -> None:
        """Test case for user_service_remove_u2_f

        Remove u2f token from a user
        """
        pass

    def test_user_service_resend_email_code(self) -> None:
        """Test case for user_service_resend_email_code

        Resend code to verify user email
        """
        pass

    def test_user_service_resend_invite_code(self) -> None:
        """Test case for user_service_resend_invite_code

        Resend an invite code for a user
        """
        pass

    def test_user_service_resend_phone_code(self) -> None:
        """Test case for user_service_resend_phone_code

        Resend code to verify user phone
        """
        pass

    def test_user_service_retrieve_identity_provider_intent(self) -> None:
        """Test case for user_service_retrieve_identity_provider_intent

        Retrieve the information returned by the identity provider
        """
        pass

    def test_user_service_send_email_code(self) -> None:
        """Test case for user_service_send_email_code

        Send code to verify user email
        """
        pass

    def test_user_service_set_email(self) -> None:
        """Test case for user_service_set_email

        Change the user email
        """
        pass

    def test_user_service_set_password(self) -> None:
        """Test case for user_service_set_password

        Change password
        """
        pass

    def test_user_service_set_phone(self) -> None:
        """Test case for user_service_set_phone

        Set the user phone
        """
        pass

    def test_user_service_start_identity_provider_intent(self) -> None:
        """Test case for user_service_start_identity_provider_intent

        Start flow with an identity provider
        """
        pass

    def test_user_service_unlock_user(self) -> None:
        """Test case for user_service_unlock_user

        Unlock user
        """
        pass

    def test_user_service_update_human_user(self) -> None:
        """Test case for user_service_update_human_user

        Update User
        """
        pass

    def test_user_service_verify_email(self) -> None:
        """Test case for user_service_verify_email

        Verify the email
        """
        pass

    def test_user_service_verify_invite_code(self) -> None:
        """Test case for user_service_verify_invite_code

        Verify an invite code for a user
        """
        pass

    def test_user_service_verify_passkey_registration(self) -> None:
        """Test case for user_service_verify_passkey_registration

        Verify a passkey for a user
        """
        pass

    def test_user_service_verify_phone(self) -> None:
        """Test case for user_service_verify_phone

        Verify the phone
        """
        pass

    def test_user_service_verify_totp_registration(self) -> None:
        """Test case for user_service_verify_totp_registration

        Verify a TOTP generator for a user
        """
        pass

    def test_user_service_verify_u2_f_registration(self) -> None:
        """Test case for user_service_verify_u2_f_registration

        Verify a u2f token for a user
        """
        pass


if __name__ == '__main__':
    unittest.main()
