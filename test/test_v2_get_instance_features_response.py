# coding: utf-8

"""
    merged spec

    merged spec

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from zitadel_client.models.v2_get_instance_features_response import V2GetInstanceFeaturesResponse

class TestV2GetInstanceFeaturesResponse(unittest.TestCase):
    """V2GetInstanceFeaturesResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2GetInstanceFeaturesResponse:
        """Test V2GetInstanceFeaturesResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2GetInstanceFeaturesResponse`
        """
        model = V2GetInstanceFeaturesResponse()
        if include_optional:
            return V2GetInstanceFeaturesResponse(
                details = zitadel_client.models.v2_details.v2Details(
                    sequence = '2', 
                    change_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    resource_owner = '69629023906488334', ),
                login_default_org = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                oidc_trigger_introspection_projections = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                oidc_legacy_introspection = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                user_schema = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                oidc_token_exchange = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                actions = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                improved_performance = zitadel_client.models.v2_improved_performance_feature_flag.v2ImprovedPerformanceFeatureFlag(
                    execution_paths = [1], 
                    source = 'SOURCE_UNSPECIFIED', ),
                web_key = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                debug_oidc_parent_error = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                oidc_single_v1_session_termination = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                disable_user_token_event = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                enable_back_channel_logout = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', ),
                login_v2 = zitadel_client.models.v2_login_v2_feature_flag.v2LoginV2FeatureFlag(
                    required = True, 
                    base_uri = '', 
                    source = 'SOURCE_UNSPECIFIED', ),
                permission_check_v2 = zitadel_client.models.v2_feature_flag.v2FeatureFlag(
                    enabled = False, 
                    source = 'SOURCE_UNSPECIFIED', )
            )
        else:
            return V2GetInstanceFeaturesResponse(
        )
        """

    def testV2GetInstanceFeaturesResponse(self):
        """Test V2GetInstanceFeaturesResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
